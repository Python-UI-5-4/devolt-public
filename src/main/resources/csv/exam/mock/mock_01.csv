test,date,snumber,sname,qnumber,qname1,qname2,example1,example2,example3,example4,answer,explain
"mock",000000,1,"소프트웨어설계",1,"소프트웨어 설계에서 '모듈화'의 주요 목적은 무엇인가?","","① 코드의 재사용성 향상","② 개발 속도 향상","③ 유지보수의 용이성","④ 사용자 인터페이스 개선","① 코드의 재사용성 향상","모듈화는 코드의 재사용성을 높이고 유지보수를 쉽게 만듭니다."
"mock",000000,1,"소프트웨어설계",2,"객체지향 설계에서 '상속'을 사용하는 이유는 무엇인가?","","① 코드 중복을 줄이기 위해","② 객체 간의 관계를 쉽게 표현하기 위해","③ 객체의 상태를 쉽게 관리하기 위해","④ 클래스 간의 의존성을 줄이기 위해","① 코드 중복을 줄이기 위해","상속은 코드의 중복을 줄이고 기능을 확장하는 데 사용됩니다."
"mock",000000,1,"소프트웨어설계",3,"소프트웨어 설계에서 '추상화'의 정의는 무엇인가?","","① 세부 사항을 숨기고 중요한 기능만 표현하는 것","② 데이터베이스를 설계하는 것","③ 객체를 분리하는 것","④ 시스템을 최적화하는 것","① 세부 사항을 숨기고 중요한 기능만 표현하는 것","추상화는 불필요한 세부 정보를 숨기고 중요한 부분만을 드러내는 설계 기법입니다."
"mock",000000,1,"소프트웨어설계",4,"소프트웨어 설계에서 '상호작용'을 정의한 것 중 옳은 것은?","","① 두 객체 간의 데이터 전송","② 두 객체 간의 기능 호출","③ 두 객체 간의 메시지 전달","④ 두 객체 간의 상태 공유","③ 두 객체 간의 메시지 전달","상호작용은 객체 간의 메시지 전달을 통해 이루어지며, 이로 인해 객체들이 협력하게 됩니다."
"mock",000000,1,"소프트웨어설계",5,"소프트웨어 설계에서 '캡슐화'의 장점은 무엇인가?","","① 데이터와 함수의 독립성 확보","② 코드 실행 속도 향상","③ 디버깅 용이","④ 코드 중복 최소화","① 데이터와 함수의 독립성 확보","캡슐화는 데이터와 그 데이터를 처리하는 함수들을 하나의 단위로 묶어 독립성을 유지하게 합니다."
"mock",000000,1,"소프트웨어설계",6,"소프트웨어 설계에서 '다형성'이란 무엇인가?","","① 동일한 메시지로 서로 다른 행동을 하는 것","② 상속 관계를 정의하는 것","③ 클래스의 상태를 정의하는 것","④ 객체가 다른 객체와 상호작용하는 것","① 동일한 메시지로 서로 다른 행동을 하는 것","다형성은 동일한 메시지로 다양한 방법으로 처리할 수 있는 기능입니다."
"mock",000000,1,"소프트웨어설계",7,"객체지향 설계에서 '인터페이스'의 목적은 무엇인가?","","① 객체의 내부 구현을 감추기 위해","② 객체 간의 상속 관계를 정의하기 위해","③ 클래스의 데이터를 보호하기 위해","④ 객체 간의 데이터 전송을 최적화하기 위해","① 객체의 내부 구현을 감추기 위해","인터페이스는 객체의 내부 구현을 숨기고 외부에서 사용할 수 있는 메서드만 제공합니다."
"mock",000000,1,"소프트웨어설계",8,"소프트웨어 설계에서 '설계 패턴'을 사용하는 이유는 무엇인가?","","① 반복적인 설계를 피하기 위해","② 코드 실행 속도를 높이기 위해","③ 코드의 중복을 늘리기 위해","④ 객체 간의 의존성을 높이기 위해","① 반복적인 설계를 피하기 위해","설계 패턴은 재사용 가능한 솔루션을 제공하여 반복적인 설계를 줄이고 코드 품질을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",9,"소프트웨어 설계에서 '정보 은닉'의 주요 목적은 무엇인가?","","① 외부의 잘못된 접근을 방지하기 위해","② 코드 실행 속도를 향상시키기 위해","③ 코드의 가독성을 높이기 위해","④ 데이터의 중복을 줄이기 위해","① 외부의 잘못된 접근을 방지하기 위해","정보 은닉은 객체의 상태를 외부에서 변경하지 못하게 하여 데이터 무결성을 보장합니다."
"mock",000000,1,"소프트웨어설계",10,"소프트웨어 설계에서 '상태 다이어그램'을 사용하는 목적은 무엇인가?","","① 객체의 상태 변화를 시각적으로 표현하기 위해","② 객체 간의 관계를 정의하기 위해","③ 기능적 요구사항을 명세하기 위해","④ 시스템의 성능을 분석하기 위해","① 객체의 상태 변화를 시각적으로 표현하기 위해","상태 다이어그램은 객체가 시간에 따라 어떻게 변화하는지 시각적으로 나타냅니다."
"mock",000000,1,"소프트웨어설계",11,"소프트웨어 설계에서 '클래스 다이어그램'을 사용하는 목적은 무엇인가?","","① 클래스 간의 관계를 시각적으로 표현하기 위해","② 시스템의 흐름을 표현하기 위해","③ 시스템의 성능을 분석하기 위해","④ 사용자 요구사항을 명세하기 위해","① 클래스 간의 관계를 시각적으로 표현하기 위해","클래스 다이어그램은 클래스 간의 상속, 연관, 의존 관계를 나타내는 데 사용됩니다."
"mock",000000,1,"소프트웨어설계",12,"객체지향 설계에서 '합성' 관계는 무엇을 의미하는가?","","① 객체가 다른 객체의 기능을 포함하는 관계","② 객체가 다른 객체의 속성을 상속받는 관계","③ 객체가 다른 객체의 상태를 변경하는 관계","④ 객체가 다른 객체와 메시지를 주고받는 관계","① 객체가 다른 객체의 기능을 포함하는 관계","합성 관계는 한 객체가 다른 객체를 포함하고 있을 때, 포함된 객체가 포함 객체의 생명주기에 의존하는 관계입니다."
"mock",000000,1,"소프트웨어설계",13,"소프트웨어 설계에서 '설계 원칙' 중 '단일 책임 원칙'은 무엇인가?","","① 한 클래스는 하나의 책임만 가져야 한다","② 클래스 간의 결합도를 최소화해야 한다","③ 클래스는 가능한 한 많은 기능을 제공해야 한다","④ 클래스는 최대한 많은 객체를 포함해야 한다","① 한 클래스는 하나의 책임만 가져야 한다","단일 책임 원칙은 클래스가 하나의 책임만 가지도록 하여 코드의 유지보수를 용이하게 만듭니다."
"mock",000000,1,"소프트웨어설계",14,"객체지향 설계에서 '의존성 주입'이란 무엇인가?","","① 객체가 다른 객체의 인스턴스를 생성하는 방식","② 객체가 외부에서 필요한 의존성을 주입받는 방식","③ 객체 간의 의존성을 제거하는 방식","④ 객체가 데이터를 다른 객체에 전달하는 방식","② 객체가 외부에서 필요한 의존성을 주입받는 방식","의존성 주입은 객체가 자신이 필요로 하는 의존성을 외부에서 주입받는 설계 방식입니다."
"mock",000000,1,"소프트웨어설계",15,"소프트웨어 설계에서 '인터페이스 설계'의 주요 목표는 무엇인가?","","① 클래스 간의 의존성을 최소화하기 위해","② 시스템의 성능을 향상시키기 위해","③ 데이터베이스 설계를 최적화하기 위해","④ 시스템의 요구사항을 명확히 하기 위해","① 클래스 간의 의존성을 최소화하기 위해","인터페이스 설계는 클래스 간의 의존성을 줄이고, 객체 간의 상호작용을 명확히 하기 위해 사용됩니다."
"mock",000000,1,"소프트웨어설계",16,"소프트웨어 설계에서 '디자인 패턴'의 종류 중 '싱글톤 패턴'의 특징은 무엇인가?","","① 클래스의 인스턴스가 하나만 존재하도록 제한하는 패턴","② 객체가 여러 개 생성될 수 있도록 허용하는 패턴","③ 객체가 서로 의존하지 않도록 하는 패턴","④ 객체가 다른 객체에 대한 정보를 알 수 없도록 하는 패턴","① 클래스의 인스턴스가 하나만 존재하도록 제한하는 패턴","싱글톤 패턴은 클래스의 인스턴스가 하나만 존재하도록 제한하여, 해당 클래스가 전역적으로 하나의 인스턴스만을 사용하도록 보장합니다."
"mock",000000,1,"소프트웨어설계",17,"소프트웨어 설계에서 '객체지향 설계 원칙' 중 '개방-폐쇄 원칙'이란 무엇인가?","","① 클래스는 확장에는 열려 있고, 수정에는 닫혀 있어야 한다","② 클래스는 최대한 많은 기능을 제공해야 한다","③ 클래스는 외부와의 상호작용을 최소화해야 한다","④ 클래스는 가능한 한 많은 객체를 포함해야 한다","① 클래스는 확장에는 열려 있고, 수정에는 닫혀 있어야 한다","개방-폐쇄 원칙은 클래스가 기능을 확장할 수는 있지만 기존 코드를 수정하지 않도록 해야 한다는 원칙입니다."
"mock",000000,1,"소프트웨어설계",18,"소프트웨어 설계에서 '의존성 역전 원칙'은 무엇인가?","","① 고수준 모듈이 저수준 모듈에 의존해야 한다","② 저수준 모듈이 고수준 모듈에 의존해야 한다","③ 고수준 모듈이 저수준 모듈을 추상화된 인터페이스를 통해 의존해야 한다","④ 고수준 모듈이 다른 모듈에 의존하지 않아야 한다","③ 고수준 모듈이 저수준 모듈을 추상화된 인터페이스를 통해 의존해야 한다","의존성 역전 원칙은 고수준 모듈이 저수준 모듈에 직접 의존하지 않고, 추상화를 통해 의존해야 한다는 원칙입니다."
"mock",000000,1,"소프트웨어설계",19,"객체지향 설계에서 '클래스'와 '객체'의 차이점은 무엇인가?","","① 클래스는 객체의 설계도이고, 객체는 클래스로부터 생성된 인스턴스이다","② 클래스는 객체의 데이터만 포함하고, 객체는 클래스의 메서드만 포함한다","③ 클래스와 객체는 동일한 개념이다","④ 클래스는 객체의 상태를 정의하고, 객체는 상태를 변경한다","① 클래스는 객체의 설계도이고, 객체는 클래스로부터 생성된 인스턴스이다","클래스는 객체의 설계도를 의미하고, 객체는 그 설계도를 기반으로 생성된 실제 인스턴스를 의미합니다."
"mock",000000,1,"소프트웨어설계",20,"소프트웨어 설계에서 '사용자 인터페이스 설계'의 주요 목표는 무엇인가?","","① 사용자가 시스템을 효율적으로 사용할 수 있도록 하는 것","② 시스템의 성능을 최적화하는 것","③ 데이터베이스를 최적화하는 것","④ 객체 간의 상호작용을 명확히 하는 것","① 사용자가 시스템을 효율적으로 사용할 수 있도록 하는 것","사용자 인터페이스 설계는 사용자가 시스템을 쉽게 이해하고 효율적으로 사용할 수 있도록 만드는 것을 목표로 합니다."
"mock",000000,1,"소프트웨어설계",21,"소프트웨어 설계에서 '디자인 패턴'을 사용하는 이유는 무엇인가?","","① 문제 해결을 위한 재사용 가능한 방법을 제공하기 위해","② 시스템의 성능을 높이기 위해","③ 객체 간의 의존성을 높이기 위해","④ 코드의 중복을 늘리기 위해","① 문제 해결을 위한 재사용 가능한 방법을 제공하기 위해","디자인 패턴은 공통된 문제에 대해 재사용 가능한 해결책을 제공하여 코드의 품질을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",22,"소프트웨어 설계에서 '유지보수성'을 높이기 위한 주요 방법은 무엇인가?","","① 모듈화를 통해 코드의 변경을 최소화하는 것","② 코드의 실행 속도를 최대화하는 것","③ 코드의 가독성을 높이는 것","④ 테스트 커버리지를 높이는 것","① 모듈화를 통해 코드의 변경을 최소화하는 것","유지보수성은 시스템의 변경이나 업데이트를 쉽게 할 수 있도록 모듈화하여 코드를 독립적으로 변경할 수 있도록 합니다."
"mock",000000,1,"소프트웨어설계",23,"소프트웨어 설계에서 '프로토타입 패턴'의 주요 목적은 무엇인가?","","① 객체의 복제를 통해 새로운 객체를 생성하는 것","② 객체 간의 의존성을 최소화하는 것","③ 객체의 상태를 외부에서 관리하는 것","④ 객체의 생명주기를 자동으로 관리하는 것","① 객체의 복제를 통해 새로운 객체를 생성하는 것","프로토타입 패턴은 기존 객체를 복제하여 새로운 객체를 생성하는 데 사용됩니다."
"mock",000000,1,"소프트웨어설계",24,"소프트웨어 설계에서 '객체지향 설계'의 주요 특징은 무엇인가?","","① 상태와 동작을 객체로 캡슐화하는 것","② 함수를 중심으로 설계하는 것","③ 데이터베이스 중심으로 설계하는 것","④ 프로세스 간의 통신을 최적화하는 것","① 상태와 동작을 객체로 캡슐화하는 것","객체지향 설계는 데이터를 객체로 묶고, 그 객체가 데이터를 처리하는 동작을 포함하는 방식입니다."
"mock",000000,1,"소프트웨어설계",25,"소프트웨어 설계에서 '컴포지션' 관계의 주요 특징은 무엇인가?","","① 객체가 다른 객체를 포함하고, 포함된 객체가 부모 객체에 의존하는 관계","② 객체 간의 상속 관계를 정의하는 것","③ 객체 간의 메시지를 주고받는 관계","④ 객체의 상태를 변경하는 관계","① 객체가 다른 객체를 포함하고, 포함된 객체가 부모 객체에 의존하는 관계","컴포지션은 포함된 객체가 포함 객체의 생명주기에 의존하는 강한 관계입니다."
"mock",000000,1,"소프트웨어설계",26,"소프트웨어 설계에서 '객체지향 설계 원칙' 중 '리스코프 치환 원칙'이란 무엇인가?","","① 자식 클래스는 부모 클래스의 기능을 확장할 수 있다","② 자식 클래스는 부모 클래스를 완전히 대체할 수 있어야 한다","③ 부모 클래스는 자식 클래스에 의존해야 한다","④ 클래스 간의 의존성을 최소화해야 한다","② 자식 클래스는 부모 클래스를 완전히 대체할 수 있어야 한다","리스코프 치환 원칙은 자식 클래스가 부모 클래스를 대체할 수 있어야 함을 의미합니다."
"mock",000000,1,"소프트웨어설계",27,"소프트웨어 설계에서 '인터페이스'를 설계할 때의 주요 원칙은 무엇인가?","","① 객체 간의 상호작용을 정의하고, 구현은 객체가 책임지도록 하는 것","② 기능을 구체적으로 명시하는 것","③ 가능한 많은 기능을 제공하는 것","④ 객체의 상태를 변경하는 것","① 객체 간의 상호작용을 정의하고, 구현은 객체가 책임지도록 하는 것","인터페이스는 객체 간의 상호작용을 정의하고, 실제 구현은 이를 따르는 객체들이 맡도록 합니다."
"mock",000000,1,"소프트웨어설계",28,"소프트웨어 설계에서 '템플릿 메서드 패턴'의 특징은 무엇인가?","","① 알고리즘의 구조를 정의하고, 세부적인 부분은 서브클래스에 위임하는 패턴","② 객체의 상태를 관리하는 패턴","③ 객체 간의 메시지 전달을 최적화하는 패턴","④ 객체 생성 책임을 위임하는 패턴","① 알고리즘의 구조를 정의하고, 세부적인 부분은 서브클래스에 위임하는 패턴","템플릿 메서드 패턴은 알고리즘의 구조를 정의하고, 세부 사항은 서브클래스에서 구현하도록 합니다."
"mock",000000,1,"소프트웨어설계",29,"소프트웨어 설계에서 '커맨드 패턴'을 사용하는 주요 이유는 무엇인가?","","① 요청을 객체로 캡슐화하여 요청을 보내는 객체와 받는 객체를 분리하는 것","② 객체 간의 관계를 단순화하는 것","③ 객체 간의 상태를 공유하는 것","④ 객체 간의 의존성을 최소화하는 것","① 요청을 객체로 캡슐화하여 요청을 보내는 객체와 받는 객체를 분리하는 것","커맨드 패턴은 요청을 객체로 캡슐화하여 요청을 보내는 객체와 받는 객체를 분리합니다."
"mock",000000,1,"소프트웨어설계",30,"소프트웨어 설계에서 '전략 패턴'의 주요 목적은 무엇인가?","","① 알고리즘을 객체로 캡슐화하여, 동적으로 알고리즘을 변경할 수 있게 하는 것","② 객체 간의 메시지 전달을 최적화하는 것","③ 객체 생성 책임을 위임하는 것","④ 객체의 상태를 관리하는 것","① 알고리즘을 객체로 캡슐화하여, 동적으로 알고리즘을 변경할 수 있게 하는 것","전략 패턴은 알고리즘을 객체로 캡슐화하여 필요에 따라 알고리즘을 동적으로 변경할 수 있게 합니다."
"mock",000000,1,"소프트웨어설계",31,"소프트웨어 설계에서 '의존성 역전 원칙'이란 무엇인가?","","① 고수준 모듈은 저수준 모듈에 의존해서는 안 된다","② 클래스는 최대한 많은 기능을 제공해야 한다","③ 객체는 가능한 한 많은 인터페이스를 사용해야 한다","④ 객체는 외부 의존성을 최소화해야 한다","① 고수준 모듈은 저수준 모듈에 의존해서는 안 된다","의존성 역전 원칙은 고수준 모듈이 저수준 모듈에 의존하지 않고, 추상화된 인터페이스에 의존하도록 해야 한다는 원칙입니다."
"mock",000000,1,"소프트웨어설계",32,"소프트웨어 설계에서 '옵저버 패턴'의 주요 목적은 무엇인가?","","① 객체의 상태 변화가 다른 객체에 자동으로 통지되도록 하는 것","② 객체 간의 관계를 단순화하는 것","③ 객체 간의 의존성을 높이는 것","④ 객체 생성 책임을 위임하는 것","① 객체의 상태 변화가 다른 객체에 자동으로 통지되도록 하는 것","옵저버 패턴은 한 객체의 상태 변화가 관련된 다른 객체에 자동으로 통지되도록 합니다."
"mock",000000,1,"소프트웨어설계",33,"소프트웨어 설계에서 '에러 처리' 시 가장 중요한 점은 무엇인가?","","① 에러가 발생한 시점을 정확히 파악하는 것","② 에러를 사용자에게 상세히 표시하는 것","③ 에러를 시스템에서 빠르게 처리하는 것","④ 에러를 발생시키지 않도록 예방하는 것","③ 에러를 시스템에서 빠르게 처리하는 것","에러 처리는 시스템의 안정성을 유지하려면 빠르고 정확하게 처리해야 합니다."
"mock",000000,1,"소프트웨어설계",34,"소프트웨어 설계에서 '배치 처리' 방식의 특징은 무엇인가?","","① 일괄적으로 데이터를 처리하는 방식","② 실시간으로 데이터를 처리하는 방식","③ 객체 간의 의존성을 최소화하는 방식","④ 사용자 입력에 즉시 반응하는 방식","① 일괄적으로 데이터를 처리하는 방식","배치 처리 방식은 데이터를 일정 시간 동안 모아서 한 번에 처리하는 방식입니다."
"mock",000000,1,"소프트웨어설계",35,"소프트웨어 설계에서 '팩토리 메서드 패턴'의 특징은 무엇인가?","","① 객체 생성의 책임을 서브클래스에 위임하는 패턴","② 객체 상태를 관리하는 패턴","③ 알고리즘을 동적으로 변경하는 패턴","④ 객체 간의 메시지 전달을 최적화하는 패턴","① 객체 생성의 책임을 서브클래스에 위임하는 패턴","팩토리 메서드 패턴은 객체 생성의 책임을 서브클래스에 위임하여 객체 생성 과정을 추상화합니다."
"mock",000000,1,"소프트웨어설계",36,"소프트웨어 설계에서 '디자인 패턴'을 사용함으로써 얻을 수 있는 가장 큰 장점은 무엇인가?","","① 코드의 재사용성 향상","② 성능 최적화","③ 데이터베이스 효율성 향상","④ 클래스 간의 의존성 증가","① 코드의 재사용성 향상","디자인 패턴은 반복적으로 발생하는 설계 문제를 해결하여 코드의 재사용성을 높이고 유지보수를 용이하게 만듭니다."
"mock",000000,1,"소프트웨어설계",37,"소프트웨어 설계에서 '사용자 인터페이스(UI) 설계'에서 중요한 점은 무엇인가?","","① 사용자의 직관적인 사용을 돕는 것","② 데이터베이스 최적화를 하는 것","③ 시스템의 보안을 강화하는 것","④ 코드 실행 속도를 높이는 것","① 사용자의 직관적인 사용을 돕는 것","사용자 인터페이스 설계는 사용자가 시스템을 직관적으로 이해하고 쉽게 사용할 수 있도록 돕는 것이 중요합니다."
"mock",000000,1,"소프트웨어설계",38,"소프트웨어 설계에서 '모듈화'의 장점은 무엇인가?","","① 코드의 재사용성을 높여 개발 시간을 단축할 수 있다","② 시스템의 성능을 최적화할 수 있다","③ 데이터베이스 설계를 최적화할 수 있다","④ 객체 간의 의존성을 높일 수 있다","① 코드의 재사용성을 높여 개발 시간을 단축할 수 있다","모듈화는 코드의 재사용성을 높여 개발 시간을 단축시키고, 유지보수도 용이하게 만듭니다."
"mock",000000,1,"소프트웨어설계",39,"소프트웨어 설계에서 '개체 관계 다이어그램(ERD)'의 목적은 무엇인가?","","① 데이터베이스 테이블 간의 관계를 시각적으로 표현하는 것","② 객체 간의 관계를 정의하는 것","③ 시스템의 흐름을 나타내는 것","④ 알고리즘을 표현하는 것","① 데이터베이스 테이블 간의 관계를 시각적으로 표현하는 것","ERD는 데이터베이스 테이블 간의 관계를 시각적으로 표현하여 데이터 모델링을 쉽게 이해할 수 있도록 합니다."
"mock",000000,1,"소프트웨어설계",40,"소프트웨어 설계에서 '소프트웨어 아키텍처'의 역할은 무엇인가?","","① 시스템의 구조를 정의하고, 각 구성 요소가 어떻게 상호작용하는지 결정하는 것","② 사용자 인터페이스를 설계하는 것","③ 데이터베이스를 설계하는 것","④ 알고리즘을 최적화하는 것","① 시스템의 구조를 정의하고, 각 구성 요소가 어떻게 상호작용하는지 결정하는 것","소프트웨어 아키텍처는 시스템의 전반적인 구조를 정의하고 각 구성 요소 간의 관계를 결정합니다."
"mock",000000,1,"소프트웨어설계",41,"소프트웨어 설계에서 '상속'의 장점은 무엇인가?","","① 코드 중복을 줄이고 재사용성을 높일 수 있다","② 객체 간의 의존성을 증가시킬 수 있다","③ 알고리즘을 단순화할 수 있다","④ 시스템 성능을 향상시킬 수 있다","① 코드 중복을 줄이고 재사용성을 높일 수 있다","상속은 기존 클래스의 기능을 확장하여 코드의 재사용성을 높이고 중복을 줄이는 데 유리합니다."
"mock",000000,1,"소프트웨어설계",42,"소프트웨어 설계에서 '팩토리 패턴'을 사용하는 주요 이유는 무엇인가?","","① 객체 생성 과정을 추상화하여 클라이언트와 객체 생성 과정을 분리하기 위해","② 알고리즘을 동적으로 변경하기 위해","③ 객체 간의 메시지를 최적화하기 위해","④ 객체 간의 상태를 공유하기 위해","① 객체 생성 과정을 추상화하여 클라이언트와 객체 생성 과정을 분리하기 위해","팩토리 패턴은 객체 생성 과정을 추상화하여 클라이언트 코드와 객체 생성 코드를 분리하는 데 사용됩니다."
"mock",000000,1,"소프트웨어설계",43,"소프트웨어 설계에서 '단일 책임 원칙'이란 무엇인가?","","① 클래스는 한 가지 책임만 가져야 한다","② 하나의 클래스는 여러 객체와 관계를 가져야 한다","③ 객체는 여러 인터페이스를 구현해야 한다","④ 알고리즘은 여러 객체에서 공유해야 한다","① 클래스는 한 가지 책임만 가져야 한다","단일 책임 원칙은 클래스가 하나의 책임만 갖고 이를 수행하도록 해야 한다는 원칙입니다."
"mock",000000,1,"소프트웨어설계",44,"소프트웨어 설계에서 '의존성 주입'의 주요 목적은 무엇인가?","","① 클래스 간의 결합도를 낮추고, 유지보수를 용이하게 하기 위해","② 객체 간의 관계를 복잡하게 만들기 위해","③ 시스템 성능을 최적화하기 위해","④ 알고리즘을 동적으로 변경하기 위해","① 클래스 간의 결합도를 낮추고, 유지보수를 용이하게 하기 위해","의존성 주입은 클래스 간의 결합도를 낮추어 코드의 재사용성과 유지보수성을 향상시키는 방법입니다."
"mock",000000,1,"소프트웨어설계",45,"소프트웨어 설계에서 '다형성'의 장점은 무엇인가?","","① 객체가 동일한 인터페이스로 서로 다른 동작을 수행할 수 있도록 한다","② 객체 간의 관계를 단순화할 수 있다","③ 코드 실행 속도를 향상시킬 수 있다","④ 시스템의 보안을 강화할 수 있다","① 객체가 동일한 인터페이스로 서로 다른 동작을 수행할 수 있도록 한다","다형성은 동일한 인터페이스로 다양한 동작을 수행할 수 있게 해, 유연하고 확장 가능한 코드를 작성할 수 있게 합니다."
"mock",000000,1,"소프트웨어설계",46,"소프트웨어 설계에서 '디자인 패턴'을 사용하는 이유는 무엇인가?","","① 반복되는 문제에 대한 해결책을 제공하여 코드 품질을 향상시킨다","② 시스템 성능을 최적화하기 위해","③ 데이터베이스 모델링을 최적화하기 위해","④ 객체 간의 의존성을 증가시키기 위해","① 반복되는 문제에 대한 해결책을 제공하여 코드 품질을 향상시킨다","디자인 패턴은 반복적으로 발생하는 설계 문제를 해결하는 표준화된 방법을 제공하여 코드 품질을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",47,"소프트웨어 설계에서 '상속'과 '구성'의 차이점은 무엇인가?","","① 상속은 부모 클래스에서 자식 클래스로 기능을 상속하고, 구성은 객체를 다른 객체에 포함하는 방식이다","② 상속은 객체를 복제하는 방식이고, 구성은 객체 간 메시지를 전달하는 방식이다","③ 상속은 기능을 숨기는 방식이고, 구성은 객체를 동적으로 생성하는 방식이다","④ 상속은 클래스 내의 메서드를 최적화하는 방식이다","① 상속은 부모 클래스에서 자식 클래스로 기능을 상속하고, 구성은 객체를 다른 객체에 포함하는 방식이다","상속은 기능을 확장하는 방법이며, 구성은 객체를 포함하여 다른 객체를 생성하는 방법입니다."
"mock",000000,1,"소프트웨어설계",48,"소프트웨어 설계에서 '옵저버 패턴'의 주요 용도는 무엇인가?","","① 객체의 상태 변화가 다른 객체에 자동으로 통지되도록 하는 것","② 객체 간의 의존성을 최소화하는 것","③ 알고리즘을 최적화하는 것","④ 객체 생성 책임을 위임하는 것","① 객체의 상태 변화가 다른 객체에 자동으로 통지되도록 하는 것","옵저버 패턴은 하나의 객체 상태 변화에 따라 관련된 다른 객체에 자동으로 알림을 보내는 방식으로 사용됩니다."
"mock",000000,1,"소프트웨어설계",49,"소프트웨어 설계에서 '객체지향 프로그래밍(OOP)'의 주요 특성은 무엇인가?","","① 데이터와 그 데이터를 처리하는 메서드를 객체로 묶는 것","② 함수 중심으로 프로그램을 구성하는 것","③ 데이터베이스 중심으로 설계하는 것","④ 객체 간의 관계를 최적화하는 것","① 데이터와 그 데이터를 처리하는 메서드를 객체로 묶는 것","객체지향 프로그래밍은 데이터와 이를 처리하는 메서드를 객체라는 단위로 묶어 프로그램을 구성하는 방식입니다."
"mock",000000,1,"소프트웨어설계",50,"소프트웨어 설계에서 '단일 책임 원칙(SRP)'을 따를 때 얻을 수 있는 이점은 무엇인가?","","① 각 클래스가 독립적인 책임을 가지므로 코드가 간결하고 유지보수가 쉬워진다","② 모든 객체가 동일한 인터페이스를 가지게 된다","③ 여러 클래스가 동일한 책임을 갖게 되어 협력할 수 있다","④ 객체 간의 의존성이 증가한다","① 각 클래스가 독립적인 책임을 가지므로 코드가 간결하고 유지보수가 쉬워진다","단일 책임 원칙을 따르면 각 클래스가 하나의 책임만 가지게 되어 코드가 간결해지고 유지보수가 쉬워집니다."
"mock",000000,1,"소프트웨어설계",51,"소프트웨어 설계에서 '서비스 지향 아키텍처(SOA)'의 특징은 무엇인가?","","① 서로 다른 시스템들이 서비스 형태로 기능을 제공하고 통합하는 방식","② 객체 간의 메시지를 최적화하는 방식","③ 데이터베이스 모델을 통합하는 방식","④ 서버 간의 통신을 최적화하는 방식","① 서로 다른 시스템들이 서비스 형태로 기능을 제공하고 통합하는 방식","서비스 지향 아키텍처(SOA)는 서로 다른 시스템들이 독립적인 서비스 형태로 기능을 제공하고, 이를 통합하여 큰 시스템을 구축하는 방식입니다."
"mock",000000,1,"소프트웨어설계",52,"소프트웨어 설계에서 'SOLID 원칙'이란 무엇인가?","","① 객체지향 설계에서 다섯 가지 원칙을 의미한다","② 코드의 성능을 최적화하는 원칙이다","③ 데이터베이스 설계를 최적화하는 원칙이다","④ 객체 간의 의존성을 증가시키는 원칙이다","① 객체지향 설계에서 다섯 가지 원칙을 의미한다","SOLID는 객체지향 설계에서 다섯 가지 중요한 원칙(Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, Interface Segregation Principle, Dependency Inversion Principle)을 의미합니다."
"mock",000000,1,"소프트웨어설계",53,"소프트웨어 설계에서 '컴포지트 패턴'을 사용하는 이유는 무엇인가?","","① 객체를 트리 구조로 구성하여 복합 객체와 단일 객체를 동일하게 다룰 수 있게 하기 위해","② 객체 간의 의존성을 줄이기 위해","③ 객체 생성 책임을 위임하기 위해","④ 객체의 상태를 변경하기 위해","① 객체를 트리 구조로 구성하여 복합 객체와 단일 객체를 동일하게 다룰 수 있게 하기 위해","컴포지트 패턴은 객체를 트리 구조로 구성하여 복합 객체와 단일 객체를 동일한 방식으로 다룰 수 있게 합니다."
"mock",000000,1,"소프트웨어설계",54,"소프트웨어 설계에서 '적합성 검사'란 무엇인가?","","① 입력된 데이터가 요구 사항에 맞는지 확인하는 과정","② 시스템의 성능을 최적화하는 과정","③ 알고리즘의 효율성을 검사하는 과정","④ 객체 간의 관계를 최적화하는 과정","① 입력된 데이터가 요구 사항에 맞는지 확인하는 과정","적합성 검사는 입력된 데이터가 정의된 요구 사항에 맞는지 확인하는 과정입니다."
"mock",000000,1,"소프트웨어설계",55,"소프트웨어 설계에서 '객체 간 결합도'를 낮추는 주요 방법은 무엇인가?","","① 의존성 주입을 사용한다","② 상속을 사용하는 것을 지양한다","③ 클래스 간의 공통 인터페이스를 제거한다","④ 객체 간의 데이터 공유를 강화한다","① 의존성 주입을 사용한다","의존성 주입을 사용하면 객체 간의 결합도를 낮추고, 코드의 재사용성과 유지보수성을 향상시킬 수 있습니다."
"mock",000000,1,"소프트웨어설계",56,"소프트웨어 설계에서 '상속' 대신 '구성'을 사용하는 이유는 무엇인가?","","① 더 높은 유연성을 제공하고, 클래스 간의 결합도를 낮출 수 있기 때문이다","② 코드 중복을 줄일 수 있기 때문이다","③ 메모리 사용을 최적화할 수 있기 때문이다","④ 성능을 최적화할 수 있기 때문이다","① 더 높은 유연성을 제공하고, 클래스 간의 결합도를 낮출 수 있기 때문이다","구성은 상속보다 더 유연하고 결합도를 낮추어, 객체 간의 독립성을 유지하면서 기능을 확장할 수 있습니다."
"mock",000000,1,"소프트웨어설계",57,"소프트웨어 설계에서 '인터페이스 분리 원칙(ISP)'의 핵심 내용은 무엇인가?","","① 클라이언트는 자신이 사용하지 않는 메서드에 의존하지 않아야 한다","② 클래스는 단일 책임을 가져야 한다","③ 하나의 클래스는 여러 인터페이스를 구현해야 한다","④ 객체는 고유한 책임만을 수행해야 한다","① 클라이언트는 자신이 사용하지 않는 메서드에 의존하지 않아야 한다","인터페이스 분리 원칙(ISP)은 클라이언트가 사용하지 않는 메서드에 의존하지 않도록 인터페이스를 분리해야 한다는 원칙입니다."
"mock",000000,1,"소프트웨어설계",58,"소프트웨어 설계에서 '템플릿 메서드 패턴'을 사용하는 이유는 무엇인가?","","① 알고리즘의 구조를 정의하고, 세부 구현을 서브클래스에 맡기기 위해","② 객체의 상태 변화를 추적하기 위해","③ 객체 생성 과정을 최적화하기 위해","④ 알고리즘의 동작을 변경하기 위해","① 알고리즘의 구조를 정의하고, 세부 구현을 서브클래스에 맡기기 위해","템플릿 메서드 패턴은 알고리즘의 구조를 정의하고, 구체적인 구현은 서브클래스에서 수행하도록 하는 패턴입니다."
"mock",000000,1,"소프트웨어설계",59,"소프트웨어 설계에서 '책임 연쇄 패턴'이란 무엇인가?","","① 요청을 처리할 수 있는 객체를 찾기 위해 객체들이 연쇄적으로 연결되어 있는 패턴","② 객체가 요청을 하나씩 처리하는 패턴","③ 여러 객체가 동일한 요청을 처리하는 패턴","④ 객체 간의 상태 변화를 추적하는 패턴","① 요청을 처리할 수 있는 객체를 찾기 위해 객체들이 연쇄적으로 연결되어 있는 패턴","책임 연쇄 패턴은 요청을 처리할 수 있는 객체를 연쇄적으로 연결하여, 적절한 객체가 요청을 처리하도록 하는 디자인 패턴입니다."
"mock",000000,1,"소프트웨어설계",60,"소프트웨어 설계에서 '리팩토링'의 주요 목적은 무엇인가?","","① 기존 코드를 개선하여 가독성과 유지보수성을 향상시키는 것","② 시스템 성능을 향상시키는 것","③ 데이터베이스 구조를 최적화하는 것","④ 객체 간 의존성을 증가시키는 것","① 기존 코드를 개선하여 가독성과 유지보수성을 향상시키는 것","리팩토링은 기존 코드를 개선하여 가독성, 효율성, 유지보수성을 향상시키고, 시스템의 품질을 높이는 과정입니다."
"mock",000000,1,"소프트웨어설계",61,"소프트웨어 설계에서 '팩토리 메서드 패턴'을 사용하면 얻을 수 있는 이점은 무엇인가?","","① 객체 생성 과정을 캡슐화하여 클라이언트와 객체 생성 로직을 분리할 수 있다","② 알고리즘을 최적화할 수 있다","③ 객체 간의 의존성을 증가시킬 수 있다","④ 객체를 동적으로 생성할 수 있다","① 객체 생성 과정을 캡슐화하여 클라이언트와 객체 생성 로직을 분리할 수 있다","팩토리 메서드 패턴은 객체 생성 로직을 캡슐화하여 클라이언트 코드와 생성 로직을 분리함으로써, 코드의 유연성과 유지보수성을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",62,"소프트웨어 설계에서 '서비스 지향 아키텍처(SOA)'의 가장 큰 장점은 무엇인가?","","① 시스템 간의 독립성을 높여 서비스 단위로 재사용이 가능해진다","② 데이터베이스 구조를 최적화할 수 있다","③ 객체 간 관계를 간소화할 수 있다","④ 알고리즘을 효율적으로 최적화할 수 있다","① 시스템 간의 독립성을 높여 서비스 단위로 재사용이 가능해진다","서비스 지향 아키텍처(SOA)는 시스템 간의 독립성을 높여 서비스 단위로 재사용 가능하도록 만들어 시스템의 확장성과 유연성을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",63,"소프트웨어 설계에서 '디자인 패턴'이란 무엇인가?","","① 반복적으로 발생하는 문제를 해결하기 위한 표준화된 설계 방법","② 성능 최적화를 위한 알고리즘","③ 데이터베이스 모델링을 위한 표준화된 기법","④ 객체 간 의존성을 관리하기 위한 도구","① 반복적으로 발생하는 문제를 해결하기 위한 표준화된 설계 방법","디자인 패턴은 '소프트웨어 설계에서 반복적으로 발생하는 문제를 해결하기 위해 표준화된 방법을 제공합니다."
"mock",000000,1,"소프트웨어설계",64,"소프트웨어 설계에서 '인터페이스'와 '추상 클래스'의 차이점은 무엇인가?","","① 인터페이스는 다중 상속을 지원하지만, 추상 클래스는 다중 상속을 지원하지 않는다","② 추상 클래스는 객체를 생성할 수 있지만, 인터페이스는 객체를 생성할 수 없다","③ 인터페이스는 메서드 구현을 제공할 수 있지만, 추상 클래스는 제공할 수 없다","④ 추상 클래스는 여러 인터페이스를 구현할 수 있다","① 인터페이스는 다중 상속을 지원하지만, 추상 클래스는 다중 상속을 지원하지 않는다","인터페이스는 다중 상속을 지원하며, 추상 클래스는 여러 클래스를 상속할 수 없습니다."
"mock",000000,1,"소프트웨어설계",65,"소프트웨어 설계에서 '메소드 체이닝'이란 무엇인가?","","① 여러 메서드를 하나의 표현식으로 이어서 호출하는 기법","② 객체의 상태를 변경하는 기법","③ 메서드를 동적으로 변경하는 기법","④ 알고리즘을 최적화하는 기법","① 여러 메서드를 하나의 표현식으로 이어서 호출하는 기법","메소드 체이닝은 여러 메서드를 이어서 하나의 표현식으로 호출하는 기법입니다."
"mock",000000,1,"소프트웨어설계",66,"소프트웨어 설계에서 '클래스 다이어그램'의 주요 목적은 무엇인가?","","① 시스템의 구조와 클래스 간의 관계를 시각적으로 표현하는 것","② 객체 간의 메시지를 최적화하는 것","③ 알고리즘의 흐름을 설명하는 것","④ 객체 생성 과정을 최적화하는 것","① 시스템의 구조와 클래스 간의 관계를 시각적으로 표현하는 것","클래스 다이어그램은 시스템의 구조와 클래스 간의 관계를 시각적으로 나타내어 설계를 쉽게 이해할 수 있도록 돕습니다."
"mock",000000,1,"소프트웨어설계",67,"소프트웨어 설계에서 '팩토리 메소드 패턴'의 주요 목적은 무엇인가?","","① 객체 생성의 책임을 서브클래스에 위임하는 것","② 객체를 미리 생성해 놓고 재사용하는 것","③ 객체의 상태를 캡슐화하는 것","④ 객체 간의 결합도를 증가시키는 것","① 객체 생성의 책임을 서브클래스에 위임하는 것","팩토리 메소드 패턴은 객체 생성의 책임을 서브클래스에 위임하여, 객체 생성 코드를 분리하고 유연성을 증가시킵니다."
"mock",000000,1,"소프트웨어설계",68,"소프트웨어 설계에서 '옵저버 패턴'을 사용하여 해결할 수 있는 문제는 무엇인가?","","① 객체 상태 변화에 대한 알림을 여러 객체에 전달하는 것","② 객체 간의 의존성을 증가시키는 것","③ 객체 생성 비용을 최적화하는 것","④ 객체의 기능을 동적으로 변경하는 것","① 객체 상태 변화에 대한 알림을 여러 객체에 전달하는 것","옵저버 패턴은 객체 상태가 변할 때 해당 상태를 관찰하는 객체들에게 알림을 보내는 방식으로, 상태 변화에 대한 반응을 처리합니다."
"mock",000000,1,"소프트웨어설계",69,"소프트웨어 설계에서 '어댑터 패턴'의 주요 목적은 무엇인가?","","① 서로 다른 인터페이스를 가진 객체들이 함께 작동하도록 변환하는 것","② 객체 간의 결합도를 증가시키는 것","③ 알고리즘을 최적화하는 것","④ 객체의 상태를 관리하는 것","① 서로 다른 인터페이스를 가진 객체들이 함께 작동하도록 변환하는 것","어댑터 패턴은 서로 다른 인터페이스를 가진 객체들이 함께 작동하도록 변환하여, 호환되지 않는 클래스들을 연결할 수 있게 해줍니다."
"mock",000000,1,"소프트웨어설계",70,"소프트웨어 설계에서 '싱글톤 패턴'의 주요 목적은 무엇인가?","","① 클래스의 인스턴스를 하나만 생성하도록 보장하는 것","② 객체 간 의존성을 최소화하는 것","③ 메서드 호출을 최적화하는 것","④ 여러 개의 인스턴스를 생성하는 것","① 클래스의 인스턴스를 하나만 생성하도록 보장하는 것","싱글톤 패턴은 클래스의 인스턴스가 하나만 생성되도록 보장하고, 전역적으로 접근할 수 있도록 하는 디자인 패턴입니다."
"mock",000000,1,"소프트웨어설계",71,"소프트웨어 설계에서 '전략 패턴'을 사용하는 주요 이유는 무엇인가?","","① 알고리즘을 객체로 캡슐화하여 동적으로 변경할 수 있도록 하는 것","② 알고리즘을 고정시키고 변경할 수 없도록 하는 것","③ 메서드 호출을 최적화하는 것","④ 객체 간의 결합도를 증가시키는 것","① 알고리즘을 객체로 캡슐화하여 동적으로 변경할 수 있도록 하는 것","전략 패턴은 알고리즘을 객체로 캡슐화하여 동적으로 변경할 수 있도록 하여 코드의 유연성을 증가시킵니다."
"mock",000000,1,"소프트웨어설계",72,"소프트웨어 설계에서 '데코레이터 패턴'의 장점은 무엇인가?","","① 객체의 기능을 동적으로 확장할 수 있다","② 객체 간의 결합도를 높일 수 있다","③ 코드 중복을 증가시킬 수 있다","④ 성능을 최적화할 수 있다","① 객체의 기능을 동적으로 확장할 수 있다","데코레이터 패턴은 객체의 기능을 동적으로 확장할 수 있어, 기존 객체를 변경하지 않고 기능을 추가할 수 있습니다."
"mock",000000,1,"소프트웨어설계",73,"소프트웨어 설계에서 '동시성(concurrency)'을 고려한 설계가 중요한 이유는 무엇인가?","","① 다수의 프로세스나 스레드가 동시에 실행될 수 있어 시스템 성능을 향상시킬 수 있기 때문이다","② 코드의 복잡성을 높이기 때문이다","③ 코드 재사용을 촉진하기 때문이다","④ 알고리즘의 동작을 최적화하기 때문이다","① 다수의 프로세스나 스레드가 동시에 실행될 수 있어 시스템 성능을 향상시킬 수 있기 때문이다","동시성 설계는 다수의 프로세스나 스레드가 동시에 실행되어 시스템의 성능과 효율성을 향상시킬 수 있기 때문에 중요합니다."
"mock",000000,1,"소프트웨어설계",74,"소프트웨어 설계에서 '객체 지향 설계 원칙'을 따를 때 얻을 수 있는 가장 큰 이점은 무엇인가?","","① 코드의 재사용성과 유지보수성을 높일 수 있다","② 시스템 성능을 최적화할 수 있다","③ 데이터베이스 설계를 최적화할 수 있다","④ 알고리즘의 효율성을 높일 수 있다","① 코드의 재사용성과 유지보수성을 높일 수 있다","객체 지향 설계 원칙을 따르면 코드의 재사용성과 유지보수성이 향상되어, 시스템의 확장성과 관리가 용이해집니다."
"mock",000000,1,"소프트웨어설계",75,"소프트웨어 설계에서 '플라이웨이트 패턴'의 주요 목적은 무엇인가?","","① 객체의 공유를 통해 메모리 사용을 최적화하는 것","② 객체 간의 의존성을 증가시키는 것","③ 알고리즘의 성능을 최적화하는 것","④ 객체 생성 비용을 증가시키는 것","① 객체의 공유를 통해 메모리 사용을 최적화하는 것","플라이웨이트 패턴은 객체를 공유하여 메모리 사용을 최적화하고, 메모리 소모를 줄이기 위해 객체의 불변 데이터를 공유합니다."
"mock",000000,1,"소프트웨어설계",76,"소프트웨어 설계에서 '컴포지트 패턴'의 주요 목적은 무엇인가?","","① 객체를 트리 구조로 구성하여 부분과 전체를 동일하게 다룰 수 있도록 하는 것","② 객체 간의 결합도를 증가시키는 것","③ 객체의 상태를 관리하는 것","④ 메서드 호출을 최적화하는 것","① 객체를 트리 구조로 구성하여 부분과 전체를 동일하게 다룰 수 있도록 하는 것","컴포지트 패턴은 객체를 트리 구조로 구성하여, 부분 객체와 전체 객체를 동일하게 다룰 수 있게 합니다."
"mock",000000,1,"소프트웨어설계",77,"소프트웨어 설계에서 '미래 예측'을 위한 설계 접근 방식은 무엇인가?","","① 변화가 일어날 가능성이 있는 부분을 모듈화하여 설계하는 것","② 성능을 최적화하는 것","③ 객체 간 관계를 간소화하는 것","④ 데이터베이스 구조를 고정하는 것","① 변화가 일어날 가능성이 있는 부분을 모듈화하여 설계하는 것","미래 예측을 위한 설계는 시스템이 변경될 가능성이 있는 부분을 미리 모듈화하여 향후 변화에 유연하게 대응할 수 있게 합니다."
"mock",000000,1,"소프트웨어설계",78,"소프트웨어 설계에서 '의존성 역전 원칙(DIP)'의 핵심 내용은 무엇인가?","","① 고수준 모듈은 저수준 모듈에 의존해서는 안 되며, 둘 다 추상화에 의존해야 한다","② 객체는 서로 결합도가 낮아야 한다","③ 클래스는 하나의 책임만 가져야 한다","④ 메서드는 하나의 작업만 수행해야 한다","① 고수준 모듈은 저수준 모듈에 의존해서는 안 되며, 둘 다 추상화에 의존해야 한다","의존성 역전 원칙(DIP)은 고수준 모듈이 저수준 모듈에 의존하지 않고, 둘 다 추상화에 의존하게 만들어 시스템의 유연성을 높입니다."
"mock",000000,1,"소프트웨어설계",79,"소프트웨어 설계에서 '단일 책임 원칙(SRP)'의 의미는 무엇인가?","","① 클래스는 하나의 책임만 가져야 한다","② 하나의 메서드는 하나의 작업만 수행해야 한다","③ 객체 간 의존성을 최소화해야 한다","④ 객체는 변경에 대해 폐쇄적이어야 한다","① 클래스는 하나의 책임만 가져야 한다","단일 책임 원칙(SRP)은 클래스가 하나의 책임만 가져야 한다는 원칙으로, 코드를 더 이해하기 쉽고 유지보수하기 쉽게 만듭니다."
"mock",000000,1,"소프트웨어설계",80,"소프트웨어 설계에서 '디자인 패턴'을 도입할 때의 주요 이점은 무엇인가?","","① 반복적인 문제를 해결할 수 있는 표준화된 방법을 제공하여, 코드의 재사용성과 유연성을 높인다","② 알고리즘을 최적화할 수 있다","③ 객체 간 의존성을 증가시킬 수 있다","④ 데이터베이스 구조를 개선할 수 있다","① 반복적인 문제를 해결할 수 있는 표준화된 방법을 제공하여, 코드의 재사용성과 유연성을 높인다","디자인 패턴은 반복적인 문제를 해결할 수 있는 표준화된 방법을 제공하여, 코드의 재사용성과 유연성을 높이고, 시스템의 유지보수성을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",81,"객체지향 설계에서 '다형성'을 활용하면 얻을 수 있는 주요 이점은 무엇인가?","","① 같은 인터페이스로 다양한 객체를 처리할 수 있다","② 객체 간의 결합도를 증가시킬 수 있다","③ 코드의 복잡성을 증가시킬 수 있다","④ 객체를 동적으로 생성할 수 있다","① 같은 인터페이스로 다양한 객체를 처리할 수 있다","다형성은 같은 인터페이스를 통해 다양한 객체를 처리할 수 있게 해주며, 이를 통해 코드의 유연성과 재사용성을 높일 수 있습니다."
"mock",000000,1,"소프트웨어설계",82,"소프트웨어 설계에서 '미로 패턴'이 사용되는 주요 목적은 무엇인가?","","① 복잡한 시스템을 단순화하여 관리하는 것","② 객체 생성과 관련된 코드 중복을 제거하는 것","③ 시스템의 성능을 최적화하는 것","④ 알고리즘의 효율성을 높이는 것","① 복잡한 시스템을 단순화하여 관리하는 것","미로 패턴은 복잡한 시스템을 단순화하여 관리하기 쉽게 만듭니다."
"mock",000000,1,"소프트웨어설계",83,"소프트웨어 설계에서 '책임 연쇄 패턴'의 주요 목적은 무엇인가?","","① 요청을 처리할 수 있는 객체에 책임을 넘겨주는 것","② 객체 간의 결합도를 증가시키는 것","③ 데이터베이스 트랜잭션을 최적화하는 것","④ 객체 상태를 캡슐화하는 것","① 요청을 처리할 수 있는 객체에 책임을 넘겨주는 것","책임 연쇄 패턴은 요청을 처리할 수 있는 객체에 책임을 넘겨서, 시스템의 유연성을 높이고 객체 간의 결합도를 줄이는 데 사용됩니다."
"mock",000000,1,"소프트웨어설계",84,"소프트웨어 설계에서 '빌더 패턴'을 사용하는 주요 이유는 무엇인가?","","① 객체 생성의 복잡한 과정을 분리하여 더 쉽게 관리할 수 있도록 하는 것","② 객체의 상태를 캡슐화하는 것","③ 객체 생성 비용을 최적화하는 것","④ 객체 간 결합도를 높이는 것","① 객체 생성의 복잡한 과정을 분리하여 더 쉽게 관리할 수 있도록 하는 것","빌더 패턴은 객체 생성의 복잡한 과정을 분리하여, 객체 생성 과정을 더 명확하고 관리하기 쉽게 만듭니다."
"mock",000000,1,"소프트웨어설계",85,"소프트웨어 설계에서 '상태 패턴'의 주요 목적은 무엇인가?","","① 객체의 상태를 객체 내부에서 캡슐화하고, 상태 변화에 따라 객체의 행동을 변경하는 것","② 객체 간 결합도를 증가시키는 것","③ 코드의 중복을 줄이는 것","④ 알고리즘의 성능을 최적화하는 것","① 객체의 상태를 객체 내부에서 캡슐화하고, 상태 변화에 따라 객체의 행동을 변경하는 것","상태 패턴은 객체의 상태에 따라 객체의 행동을 변경하며, 상태를 객체 내부에서 캡슐화하여 코드의 복잡성을 줄입니다."
"mock",000000,1,"소프트웨어설계",86,"소프트웨어 설계에서 '컴포넌트 기반 설계'가 중요한 이유는 무엇인가?","","① 시스템을 재사용 가능한 컴포넌트로 나누어, 유지보수와 확장성을 용이하게 만드는 것","② 객체 간의 의존성을 최소화하는 것","③ 코드의 효율성을 높이는 것","④ 시스템의 성능을 최적화하는 것","① 시스템을 재사용 가능한 컴포넌트로 나누어, 유지보수와 확장성을 용이하게 만드는 것","컴포넌트 기반 설계는 시스템을 작은 재사용 가능한 단위로 나누어, 시스템의 유지보수와 확장성을 용이하게 합니다."
"mock",000000,1,"소프트웨어설계",87,"소프트웨어 설계에서 '객체지향 설계'에서 다뤄야 할 중요한 원칙은 무엇인가?","","① 캡슐화, 상속, 다형성","② 함수형 프로그래밍","③ 코드 중복","④ 데이터베이스 정규화","① 캡슐화, 상속, 다형성","객체지향 설계의 중요한 원칙은 캡슐화, 상속, 다형성으로, 이는 객체의 재사용성과 유지보수성을 높이고, 시스템의 유연성을 증가시킵니다."
"mock",000000,1,"소프트웨어설계",88,"소프트웨어 설계에서 '객체지향 설계'가 아닌 '절차적 설계'의 특징은 무엇인가?","","① 프로그램의 실행 흐름에 따라 순차적으로 명령어가 실행되는 것","② 객체를 사용하여 데이터와 기능을 캡슐화하는 것","③ 상태와 동작을 분리하는 것","④ 다형성 및 상속을 활용하는 것","① 프로그램의 실행 흐름에 따라 순차적으로 명령어가 실행되는 것","절차적 설계는 프로그램의 실행 흐름에 따라 순차적으로 명령어가 실행되며, 데이터와 기능을 별도로 다룹니다."
"mock",000000,1,"소프트웨어설계",89,"소프트웨어 설계에서 '프록시 패턴'을 사용하는 주요 이유는 무엇인가?","","① 객체에 접근하는 방법을 제어하고, 필요에 따라 객체를 대체하거나 지연 로딩하는 것","② 객체의 상태를 캡슐화하는 것","③ 객체 생성 비용을 최적화하는 것","④ 코드의 효율성을 높이는 것","① 객체에 접근하는 방법을 제어하고, 필요에 따라 객체를 대체하거나 지연 로딩하는 것","프록시 패턴은 객체에 대한 접근을 제어하고, 필요한 시점에 객체를 생성하거나 대체할 수 있게 해줍니다."
"mock",000000,1,"소프트웨어설계",90,"소프트웨어 설계에서 '자바'의 'interface'를 사용하는 주요 목적은 무엇인가?","","① 클래스가 반드시 구현해야 할 메서드를 정의하는 것","② 객체 간의 의존성을 증가시키는 것","③ 코드의 효율성을 높이는 것","④ 클래스 간의 상속 관계를 정의하는 것","① 클래스가 반드시 구현해야 할 메서드를 정의하는 것","자바에서 인터페이스는 클래스가 반드시 구현해야 할 메서드를 정의하며, 다형성을 지원하는 중요한 역할을 합니다."
"mock",000000,1,"소프트웨어설계",91,"소프트웨어 설계에서 '연결 객체'의 목적은 무엇인가?","","① 객체 간의 의존성을 줄이고, 데이터의 흐름을 관리하는 것","② 객체의 상태를 캡슐화하는 것","③ 객체 생성 비용을 최적화하는 것","④ 클래스 간의 상속 관계를 정의하는 것","① 객체 간의 의존성을 줄이고, 데이터의 흐름을 관리하는 것","연결 객체는 객체 간의 의존성을 줄이고, 데이터의 흐름을 관리하여 시스템의 유연성을 높입니다."
"mock",000000,1,"소프트웨어설계",92,"소프트웨어 설계에서 '템플릿 메소드 패턴'을 사용하는 주요 이유는 무엇인가?","","① 알고리즘의 골격을 정의하고, 세부적인 구현을 서브클래스에 맡기는 것","② 객체 생성 비용을 최적화하는 것","③ 객체 상태를 관리하는 것","④ 객체 간의 결합도를 증가시키는 것","① 알고리즘의 골격을 정의하고, 세부적인 구현을 서브클래스에 맡기는 것","템플릿 메소드 패턴은 알고리즘의 골격을 정의하고, 세부적인 구현을 서브클래스에 맡겨 유연성을 높입니다."
"mock",000000,1,"소프트웨어설계",93,"소프트웨어 설계에서 '미래 예측'을 위한 설계 접근 방식의 장점은 무엇인가?","","① 시스템 변경에 유연하게 대응할 수 있는 구조를 제공하는 것","② 객체 간 결합도를 증가시키는 것","③ 코드의 복잡성을 증가시키는 것","④ 알고리즘의 성능을 최적화하는 것","① 시스템 변경에 유연하게 대응할 수 있는 구조를 제공하는 것","미래 예측을 위한 설계는 시스템 변경에 유연하게 대응할 수 있도록 구조를 설계하여, 장기적으로 유지보수성이 향상됩니다."
"mock",000000,1,"소프트웨어설계",94,"소프트웨어 설계에서 '디자인 패턴'을 사용하는 가장 큰 장점은 무엇인가?","","① 문제 해결을 위한 표준화된 방법을 제공하여 코드의 일관성을 유지할 수 있다","② 알고리즘 성능을 최적화하는 것","③ 객체 간 의존성을 높이는 것","④ 데이터베이스 성능을 최적화하는 것","① 문제 해결을 위한 표준화된 방법을 제공하여 코드의 일관성을 유지할 수 있다","디자인 패턴은 반복적인 문제 해결을 위한 표준화된 방법을 제공하여 코드의 일관성을 유지하고, 유지보수성을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",95,"소프트웨어 설계에서 '분리된 인터페이스'의 중요성은 무엇인가?","","① 인터페이스와 구현을 분리하여 유연성을 높이는 것","② 객체 간 결합도를 증가시키는 것","③ 알고리즘의 성능을 최적화하는 것","④ 객체 상태를 관리하는 것","① 인터페이스와 구현을 분리하여 유연성을 높이는 것","분리된 인터페이스는 인터페이스와 구현을 분리하여, 시스템의 유연성을 높이고 코드 변경 시 영향을 최소화합니다."
"mock",000000,1,"소프트웨어설계",96,"소프트웨어 설계에서 '프로토타입 패턴'의 주요 목적은 무엇인가?","","① 객체를 복제하여 새로운 객체를 생성하는 것","② 알고리즘의 성능을 최적화하는 것","③ 객체 간 결합도를 증가시키는 것","④ 객체의 상태를 캡슐화하는 것","① 객체를 복제하여 새로운 객체를 생성하는 것","프로토타입 패턴은 객체를 복제하여 새로운 객체를 생성하는 방식으로, 객체 생성 비용을 줄이고 성능을 최적화합니다."
"mock",000000,1,"소프트웨어설계",97,"소프트웨어 설계에서 'MVC 패턴'을 사용하는 이유는 무엇인가?","","① 모델, 뷰, 컨트롤러를 분리하여 유지보수와 확장성을 높이는 것","② 객체 간 결합도를 증가시키는 것","③ 코드의 효율성을 높이는 것","④ 알고리즘 성능을 최적화하는 것","① 모델, 뷰, 컨트롤러를 분리하여 유지보수와 확장성을 높이는 것","MVC 패턴은 모델, 뷰, 컨트롤러를 분리하여, 유지보수와 확장성을 높이고 코드의 재사용성을 증가시킵니다."
"mock",000000,1,"소프트웨어설계",98,"소프트웨어 설계에서 '캡슐화'의 주된 목적은 무엇인가?","","① 객체의 내부 구현을 숨기고 외부에서 접근할 수 있는 인터페이스만을 제공하는 것","② 알고리즘의 성능을 최적화하는 것","③ 객체 간 결합도를 증가시키는 것","④ 코드의 효율성을 높이는 것","① 객체의 내부 구현을 숨기고 외부에서 접근할 수 있는 인터페이스만을 제공하는 것","캡슐화는 객체의 내부 구현을 숨기고, 외부에서는 정의된 인터페이스를 통해서만 접근할 수 있도록 하여 코드의 유지보수성을 높입니다."
"mock",000000,1,"소프트웨어설계",99,"소프트웨어 설계에서 '의존성 주입'을 사용하는 이유는 무엇인가?","","① 객체 간 결합도를 줄이고, 테스트 용이성을 높이는 것","② 코드의 효율성을 높이는 것","③ 객체 상태를 관리하는 것","④ 알고리즘 성능을 최적화하는 것","① 객체 간 결합도를 줄이고, 테스트 용이성을 높이는 것","의존성 주입은 객체 간 결합도를 줄이고, 객체들이 필요로 하는 의존성을 외부에서 주입하여 코드의 유연성을 높이고, 테스트 용이성을 향상시킵니다."
"mock",000000,1,"소프트웨어설계",100,"소프트웨어 설계에서 '싱글톤 패턴'의 주요 목적은 무엇인가?","","① 클래스의 인스턴스를 하나만 생성하여 전역에서 접근할 수 있도록 하는 것","② 객체의 상태를 캡슐화하는 것","③ 객체 생성 비용을 최적화하는 것","④ 알고리즘 성능을 최적화하는 것","① 클래스의 인스턴스를 하나만 생성하여 전역에서 접근할 수 있도록 하는 것","싱글톤 패턴은 클래스의 인스턴스를 하나만 생성하여, 시스템 내에서 그 인스턴스에 전역적으로 접근할 수 있도록 보장합니다."