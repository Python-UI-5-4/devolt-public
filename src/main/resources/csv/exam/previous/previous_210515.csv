test,date,snumber,sname,qnumber,qname1,qname2,example1,example2,example3,example4,answer,explain
"previous","220305",1,"소프트웨어설계",1,"시스템의 구성요소로 볼 수 없는 것은?","","① Process","② Feedback","③ Maintenance","④ Control","③ Maintenance","Maintenance는 시스템의 구성요소가 아니라 시스템을 유지하고 보수하는 활동입니다."
"previous","220305",1,"소프트웨어설계",2,"유스케이스(Usecase)에 대한 설명 중 옳은 것은?","","① 유스케이스 다이어그램은 개발자의 요구를 추출하고 분석하기 위해 주로 사용한다.","② 액터는 대상 시스템과 상호 작용하는 사람이나 다른 시스템에 의한 역할이다.","③ 사용자 액터는 본 시스템과 데이터를 주고받는 연동 시스템을 의미한다.","④ 연동의 개념은 일방적으로 데이터를 파일이나 정해진 형식으로 넘겨주는 것을 의미한다.","② 액터는 대상 시스템과 상호 작용하는 사람이나 다른 시스템에 의한 역할이다.","액터는 유스케이스와 상호작용하는 사람, 기기, 시스템 등 실체를 의미합니다."
"previous","220305",1,"소프트웨어설계",3,"요구사항 개발 프로세스의 순서로 옳은 것은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_03.gif?alt=media","① ㉠ - ㉡ - ㉢ - ㉣","② ㉠ - ㉢ - ㉡ - ㉣","③ ㉠ - ㉣ - ㉡ - ㉢","④ ㉠ - ㉡ - ㉣ - ㉢","① ㉠ - ㉡ - ㉢ - ㉣","요구사항 개발 프로세스는 요구사항 수집, 요구사항 분석, 요구사항 명세, 요구사항 검증의 순서로 이루어집니다."
"previous","220305",1,"소프트웨어설계",4,"객체지향 기법에서 같은 클래스에 속한 각각의 객체를 의미하는 것은?","","① instance","② message","③ method","④ module","① instance","instance는 클래스를 기반으로 생성된 개별적인 객체를 의미하며, 각각의 인스턴스는 서로 다른 상태와 행동을 가지고 있습니다."
"previous","220305",1,"소프트웨어설계",5,"객체지향 설계에서 객체가 가지고 있는 속성과 오퍼레이션의 일부를 감추어서 객체의 외부에서는 접근이 불가능하게 하는 개념은?","","① 조직화(Organizing)","② 캡슐화(Encapsulation)","③ 정보은닉(Infomation Hiding)","④ 구조화(Structuralization)","③ 정보은닉(Infomation Hiding)","정보은닉은 객체의 내부 구현을 외부에 감추어서 객체의 불필요한 접근을 막고, 객체의 안정성과 보안성을 높이기 위한 개념입니다. (가답안은 3번으로 발표되었지만, 확정답안은 2/3번이 모두 정답처리 된 문항입니다.)"
"previous","220305",1,"소프트웨어설계",6,"GoF (Gangs of Four) 디자인 패턴에 대한 설명으로 틀린 것은?","","① factory method pattern은 상위클래스에서 객체를 생성하는 인터페이스를 정의하고, 하위클래스에서 인스턴스를 생성하도록 하는 방식이다.","② prototype pattem은 prototype을 먼저 생성하고 인스턴스를 복제하여 사용하는 구조이다.","③ bridge pattem은 기존에 구현되어 있는 클래스에 기능 발생 시 기존 클래스를 재사용할 수 있도록 중간에서 맞춰주는 역할을 한다.","④ mediator pattem은 객체간의 통제와 지시의 역할을 하는 중재자를 두어 객체지향의 목표를 달성하게 해준다.","③ bridge pattem은 기존에 구현되어 있는 클래스에 기능 발생 시 기존 클래스를 재사용할 수 있도록 중간에서 맞춰주는 역할을 한다.","bridge 패턴은 구현과 추상화를 분리하여 변경에 유연한 시스템을 만드는 패턴입니다."
"previous","220305",1,"소프트웨어설계",7,"요구사항 분석이 어려운 이유가 아닌 것은?","","① 개발자와 사용자 간의 지식이나 표현의 차이가 커서 상호 이해가 쉽지 않다.","② 사용자의 요구는 예외가 거의 없어 열거와 구조화가 어렵지 않다.","③ 사용자의 요구사항이 모호하고 불명확하다.","④ 소프트웨어 개발 과정 중에 요구사항이 계속 변할 수 있다.","② 사용자의 요구는 예외가 거의 없어 열거와 구조화가 어렵지 않다.","사용자의 요구사항은 일반적으로 예외가 많고, 불완전하며, 변경될 수 있는 특징을 가지고 있습니다."
"previous","220305",1,"소프트웨어설계",8,"소프트웨어 아키텍처 설계에서 시스템 품질속성이 아닌 것은?","","① 가용성 (Availability)","② 독립성 (Isolation)","③ 변경 용이성 (Modifiability)","④ 사용성(Usability)","② 독립성 (Isolation)","독립성은 시스템의 모듈성과 관련된 개념으로, 소프트웨어 아키텍처 설계에서 고려할 수 있는 품질속성이지만, 시스템 품질속성으로 분류되지는 않습니다."
"previous","220305",1,"소프트웨어설계",9,"다음 설명에 해당하는 시스템으로 옳은 것은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_09.gif?alt=media","① 연계 서버","② 중계 서버","③ 송신 시스템","④ 수신 시스템","③ 송신 시스템","송신 시스템은 메시지를 작성하고, 연계 서버를 통해 중계 서버로 메시지를 전송하며, 최종적으로 수신 시스템으로 메시지를 전달합니다."
"previous","220305",1,"소프트웨어설계",10,"CASE(Computer-Aided Software Engineering)의 원천 기술이 아닌 것은?","","① 구조적 기법","② 프로토타이핑 기술","③ 정보 저장소 기술","④ 일괄처리 기술","④ 일괄처리 기술","일괄처리 기술은 데이터 처리 방식의 하나로, 일정 시간 동안 발생한 데이터를 한꺼번에 처리하는 방식으로, 소프트웨어 개발과는 직접적인 관련이 없습니다."
"previous","220305",1,"소프트웨어설계",11,"객체에게 어떤 행위를 하도록 지시하는 명령은?","","① Class","② Package","③ Object","④ Message","④ Message","객체에게 어떤 행위를 하도록 지시하는 명령은 메시지(message)입니다."
"previous","220305",1,"소프트웨어설계",12,"서브시스템이 입력 데이터를 받아 처리하고 결과를 다른 시스템에 보내는 작업이 반복되는 아키텍처 스타일은?","","① 클라이언트 서버 구조","② 계층 구조","③ MVC 구조","④ 파이프 필터 구조","④ 파이프 필터 구조","파이프 필터 구조는 데이터 스트림을 처리하는 데 사용되는 아키텍처 스타일로, 데이터 스트림을 처리하는 일련의 필터로 구성됩니다."
"previous","220305",1,"소프트웨어설계",13,"럼바우(Rumbaugh)의 객체지향 분석에서 사용하는 분석 활동으로 옳은 것은?","","① 객체 모델링, 동적 모델링, 정적 모델링","② 객체 모델링, 동적 모델링, 기능 모델링","③ 동적 모델링, 기능 모델링, 정적 모델링","④ 정적 모델링, 객체 모델링, 기능 모델링","② 객체 모델링, 동적 모델링, 기능 모델링","럼바우의 객체지향 분석은 객체 모델링, 동적 모델링, 기능 모델링의 세 가지 분석 활동으로 이루어집니다."
"previous","220305",1,"소프트웨어설계",14,"UML 다이어그램이 아닌 것은?","","① 액티비티 다이어그램(Activity diagram)","② 절차 다이어그램(Procedural diagram)","③ 클래스 다이어그램(Class diagram)","④ 시퀀스 다이어그램(Sequence diagram)","② 절차 다이어그램(Procedural diagram)","절차 다이어그램은 객체 지향 시스템이 아닌, 절차적 시스템을 모델링하기 위한 다이어그램입니다."
"previous","220305",1,"소프트웨어설계",15,"UML 모델에서 한 객체가 다른 객체에게 오퍼레이션을 수행하도록 지정하는 의미적 관계로 옳은 것은?","","① Dependency","② Realization","③ Generalization","④ Association","② Realization","UML 모델에서 Realization은 한 객체가 다른 객체의 인터페이스를 구현하는 관계를 의미합니다."
"previous","220305",1,"소프트웨어설계",16,"다음 중 상위 CASE 도구가 지원하는 주요기능으로 볼 수 없는 것은?","","① 모델들 사이의 모순검사 기능","② 전체 소스코드 생성 기능","③ 모델의 오류검증 기능","④ 자료흐름도 작성 기능","② 전체 소스코드 생성 기능","전체 소스코드 생성 기능은 통합 CASE 도구에서 제공하는 기능으로, 상위 CASE 도구에서 제공하는 기능보다 더 많은 기능을 제공하고, 더 복잡한 구조의 시스템을 지원합니다."
"previous","220305",1,"소프트웨어설계",17,"요구사항 관리 도구의 필요성으로 틀린 것은?","","① 요구사항 변경으로 인한 비용 편익 분석","② 기존 시스템과 신규 시스템의 성능 비교","③ 요구사항 변경의 추적","④ 요구사항 변경에 따른 영향 평가","② 기존 시스템과 신규 시스템의 성능 비교","기존 시스템과 신규 시스템의 성능 비교는 시스템 설계 및 구현 단계에서 수행하는 작업입니다."
"previous","220305",1,"소프트웨어설계",18,"애자일 개발 방법론이 아닌 것은?","","① 스크럼(Scrum)","② 익스트림 프로그래밍(XP, eXtreme Programming)","③ 기능 주도 개발(FDD, Feature Driven Development)","④ 하둡(Hadoop)","④ 하둡(Hadoop)","하둡은 대규모 데이터 처리를 위한 분산 처리 프레임워크입니다."
"previous","220305",1,"소프트웨어설계",19,"GoF(Gangs of Four) 디자인 패턴 중 생성패턴으로 옳은 것은?","","① singleton pattern","② adapter pattern","③ decorator pattern","④ state pattern","① singleton pattern","singleton pattern은 특정 클래스에 객체 인스턴스가 하나만 존재하도록 하는 패턴입니다."
"previous","220305",1,"소프트웨어설계",20,"사용자 인터페이스(UI)의 특징으로 틀린 것은?","","① 구현하고자 하는 결과의 오류를 최소화한다.","② 사용자의 편의성을 높임으로써 작업시간을 증가시킨다.","③ 막연한 작업 기능에 대해 구체적인 방법을 제시하여 준다.","④ 사용자 중심의 상호 작용이 되도록 한다.","② 사용자의 편의성을 높임으로써 작업시간을 증가시킨다.","사용자 인터페이스(UI)는 사용자와 시스템 간의 상호 작용을 매개하는 것으로, 사용자의 편의성을 높이고, 작업 효율성을 향상시키는 것을 목적으로 합니다."
"previous","220305",2,"소프트웨어개발",21,"힙 정렬(Heap Sort)에 대한 설명으로 틀린것은?","","① 정렬할 입력 레코드들로 힘을 구성하고가장 큰 키 값을 갖는 루트 노드를제거하는 과정을 반복하여 정렬하는기법이다.","② 평균 수행 시간은 O(nlog2n)이다.","③ 완전 이진트리(complete binary tree)로 입력자료의 레코드를 구성한다.","④ 최악의 수행 시간은 O(2n4)이다.","④ 최악의 수행 시간은 O(2n4)이다.","힙 정렬의 최악의 수행 시간은 힙을 구성하는 데 O(n)의 시간이 걸리고, 루트 노드를 제거하는 데 O(log2n)의 시간이 걸리는 O(nlog2n)입니다."
"previous","220305",2,"소프트웨어개발",22,"다음 중 단위 테스트를 통해 발견할 수 있는 오류가 아닌 것은?","","① 알고리즘 오류에 따른 원치 않는 결과","② 탈출구가 없는 반복문의 사용","③ 모듈 간의 비정상적 상호작용으로 인한 원치 않는 결과","④ 틀린 계산 수식에 의한 잘못된 결과","③ 모듈 간의 비정상적 상호작용으로 인한 원치 않는 결과","다른 모듈과의 상호작용에 의해 발생하는 오류는 단위 테스트를 통해 발견할 수 없습니다."
"previous","220305",2,"소프트웨어개발",23,"다음 설명의 소프트웨어 테스트의 기본원칙은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_23.gif?alt=media","① 살충제 패러독스","② 결함 집중","③ 오류 부재의 궤변","④ 완벽한 테스팅은 불가능","② 결함 집중","결함 집중은 소프트웨어 테스트에서 결함이 발생할 가능성이 높은 부분에 집중하여 테스트를 수행해야 한다는 것을 의미합니다."
"previous","220305",2,"소프트웨어개발",24,"버전 관리 항목 중 저장소에 새로운 버전의 파일로 갱신하는 것을 의미하는 용어는?","","① 형상 감사(Configuration Audit)","② 롤백 (Rollback)","③ 단위 테스트(Unit Test)","④ 체크인(Check-In)","④ 체크인(Check-In)","버전 관리 시스템에서 체크인은 작업한 파일을 저장소에 갱신하는 것을 의미합니다. 체크인을 하면 저장소에 새로운 버전의 파일이 생성되고, 이전 버전의 파일은 보관됩니다."
"previous","220305",2,"소프트웨어개발",25,"소프트웨어 테스트와 관련한 설명으로 틀린것은?","","① 화이트 박스 테스트는 모듈의 논리적인 구조를 체계적으로 점검할 수 있다.","② 블랙 박스 테스트는 프로그램의 구조를고려하지 않는다.","③ 테스트 케이스에는 일반적으로 시험 조건, 테스트 데이터, 예상 결과가 포함되어야 한다.","④ 화이트 박스 테스트에서 기본 경로(BasisPath)란 흐름 그래프의 시작 노드에서 종료 노드까지의 서로 독립된 경로로 싸이클을 허용하지 않는 경로를 말한다.","④ 화이트 박스 테스트에서 기본 경로(BasisPath)란 흐름 그래프의 시작 노드에서 종료 노드까지의 서로 독립된 경로로 싸이클을 허용하지 않는 경로를 말한다","화이트 박스 테스트에서 기본 경로는 흐름 그래프의 시작 노드에서 종료노드까지의 모든 경로를 의미합니다."
"previous","220305",2,"소프트웨어개발",26,"애플리케이션의 처리량, 응답시간, 경과시간, 자원사용률에 대해 가상의 사용자를 생성하고 테스트를 수행함으로써 성능 목표를 달성하였는지를 확인하는 테스트 자동화 도구는?","","① 명세 기반 테스트 설계 도구","② 코드 기반 테스트 설계 도구","③ 기능 테스트 수행 도구","④ 성능 테스트 도구","④ 성능 테스트 도구","성능 테스트 도구는 애플리케이션의 성능을 측정하기 위한 도구로, 처리량, 응답시간, 경과시간, 자원사용률 등의 성능 지표를 측정하고, 성능 목표를 달성하였는지를 확인하는 데 사용됩니다."
"previous","220305",2,"소프트웨어개발",27,"소프트웨어 형상 관리에 대한 설명으로 거리가 먼 것은?","","① 소프트웨어에 가해지는 변경을 제어하고 관리한다.","② 프로젝트 계획, 분석서, 설계서, 프로그램, 테스트 케이스 모두 관리 대상이다.","③ 대표적인 형상관리 도구로 Ant, Maven, Gradle 등이 있다.","④ 유지 보수 단계뿐만 아니라 개발 단계에도 적용할 수 있다.","③ 대표적인 형상관리 도구로 Ant, Maven, Gradle 등이 있다.","Ant, Maven, Gradle은 소프트웨어 빌드 도구입니다."
"previous","220305",2,"소프트웨어개발",28,"디지털 저작권 관리(DRM) 구성 요소가 아닌 것은?","","① Dataware house","② DRM Controller","③ Packager","④ Contents Distributor","① Dataware house","데이터웨어하우스(Dataware house)는 대규모 데이터를 통합하여 저장하고 분석하는 시스템입니다."
"previous","220305",2,"소프트웨어개발",29,"다음 설명의 소프트웨어 버전 관리도구 방식은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_29.gif?alt=media","① 단일 저장소 방식","② 분산 저장소 방식","③ 공유폴더 방식","④ 클라이언트·서버 방식","② 분산 저장소 방식","보기는 Git을 사용하는 분산 저장소 방식에 대한 설명입니다.. Git은 모든 개발자들이 로컬 저장소를 가지고 있으며, 중앙 저장소가 아닌 각자의 로컬 저장소에서 작업을 하고 변경 내용을 서로 공유하면서 버전을 관리하는 방식입니다."
"previous","220305",2,"소프트웨어개발",30,"블랙 박스 테스트를 이용하여 발견할 수 있는 오류가 아닌 것은?","","① 비정상적인 자료를 입력해도 오류 처리를 수행하지 않는 경우","② 정상적인 자료를 입력해도 요구된 기능이 제대로 수행되지 않는 경우","③ 반복 조건을 만족하는데도 루프 내의 문장이 수행되지 않는 경우","④ 경계값을 입력할 경우 요구된 출력 결과가 나오지 않는 경우","③ 반복 조건을 만족하는데도 루프 내의 문장이 수행되지 않는 경우","블랙박스 테스트는 소프트웨어의 내부 구조나 구현 방법에 대한 지식을 바탕으로 테스트를 수행하지 않기 때문에 소프트웨어의 내부적인 논리 오류나 구현 오류는 발견하기 어렵습니다."
"previous","220305",2,"소프트웨어개발",31,"다음 자료를 버블 정렬을 이용하여 오름차순으로 정렬할 경우 Pass 2의 결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_31.gif?alt=media","① 3, 5, 6, 7, 9","② 6, 7, 3, 5, 9","③ 3, 5, 9, 6, 7","④ 6, 3, 5, 7, 9","④ 6, 3, 5, 7, 9","버블 정렬은 서로 인접한 두 원소를 검사하여 정렬하는 알고리즘입니다."
"previous","220305",2,"소프트웨어개발",32,"정렬된 N개의 데이터를 처리하는 데 O(Nlog2N)의 시간이 소요되는 정렬 알고리즘은?","","① 합병정렬","② 버블정렬","③ 선택정렬","④ 삽입정렬","① 합병정렬","합병정렬은 정렬된 두 부분 배열을 합쳐서 정렬된 하나의 배열을 만드는 알고리즘으로, 최선의 경우와 최악의 경우, 평균의 경우 모두 O(Nlog2N)의 시간 복잡도를 가지는 정렬 알고리즘입니다."
"previous","220305",2,"소프트웨어개발",33,"다음 postfix로 표현된 연산식의 연산 결과로 옳은 것은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_33.gif?alt=media","① 35","② 42","③ 81","④ 360","② 42","Postfix 표기법은 연산자가 피연산자 뒤에 나오는 표기법으로 이 연산식을 해석하기 위해서는 스택을 사용하여 연산을 수행합니다."
"previous","220305",2,"소프트웨어개발",34,"EAI(Enterprise Application Integration) 구축 유형에서 애플리케이션 사이에 미들웨어를 두어 처리하는 것은?","","① Message Bus","② Point-to-point","③ Hub & Spoke","④ Hybrid","① Message Bus","Message Bus는 애플리케이션 사이에 미들웨어를 두어 처리하는 EAI 구축 유형 중 하나로, 중앙 집중적인 메시지 버스를 통해 애플리케이션 간 통신을 처리합니다. (가답안은 1번으로 발표되었지만, 확정답안은 1/3/4번이 모두 정답처리 된 문항입니다.)"
"previous","220305",2,"소프트웨어개발",35,"인터페이스 구현 검증 도구가 아닌 것은?","","① Foxbase","② STAF","③ watir","④ xUnit","① Foxbase","Foxbase는 관계형 데이터베이스 관리 시스템(RDBMS)입니다."
"previous","220305",2,"소프트웨어개발",36,"클린코드 작성원칙에 대한 설명으로 틀린 것은?","","① 코드의 중복을 최소화 한다.","② 코드가 다른 모듈에 미치는 영향을 최대화하도록 작성한다.","③ 누구든지 코드를 쉽게 읽을 수 있도록 작성한다.","④ 간단하게 코드를 작성한다.","② 코드가 다른 모듈에 미치는 영향을 최대화하도록 작성한다.","클린코드는 다른 모듈에 미치는 영향을 최소화하여 모듈 간 결합도를 낮추고 유지보수성을 높이는 것을 목표로 합니다."
"previous","220305",2,"소프트웨어개발",37,"소프트웨어 패키징에 대한 설명으로 틀린 것은?","","① 패키징은 개발자 중심으로 진행한다.","② 신규 및 변경 개발소스를 식별하고, 이를 모듈화하여 상용제품으로 패키징 한다.","③ 고객의 편의성을 위해 매뉴얼 및 버전관리를 지속적으로 한다.","④ 범용 환경에서 사용이 가능하도록 일반적인 배포 형태로 패키징이 진행된다.","① 패키징은 개발자 중심으로 진행한다.","소프트웨어 패키징은 개발자뿐만 아니라 품질 보증, 영업, 마케팅 등 다양한 부서가 참여하여 진행합니다."
"previous","220305",2,"소프트웨어개발",38,"공학적으로 잘된 소프트웨어(Well Engineered Software)의 설명 중 틀린 것은?","","① 소프트웨어는 유지보수가 용이해야 한다.","② 소프트웨어는 신뢰성이 높아야 한다.","③ 소프트웨어는 사용자 수준에 무관하게 일관된 인터페이스를 제공해야 한다.","④ 소프트웨어는 충분한 테스팅을 거쳐야 한다.","③ 소프트웨어는 사용자 수준에 무관하게 일관된 인터페이스를 제공해야 한다.","인터페이스는 사용자 경험(User Experience) 측면에서 중요한 요소 중 하나이며, 사용자의 편의성과 효율성을 높이기 위해 고려되어야 합니다."
"previous","220305",2,"소프트웨어개발",39,"테스트와 디버그의 목적으로 옳은 것은?","","① 테스트는 오류를 찾는 작업이고 디버깅은 오류를 수정하는 작업이다.","② 테스트는 오류를 수정하는 작업이고 디버깅은 오류를 찾는 작업이다.","③ 둘 다 소프트웨어의 오류를 찾는 작업으로 오류 수정은 하지 않는다.","④ 둘 다 소프트웨어 오류의 발견, 수정과 무관하다.","① 테스트는 오류를 찾는 작업이고 디버깅은 오류를 수정하는 작업이다.","테스트는 소프트웨어가 요구사항을 만족하는지 예상대로 동작하는지를 확인하기 위한 활동으로, 테스트 과정에서 오류가 발견되면, 이를 디버깅을 통해 수정합니다."
"previous","220305",2,"소프트웨어개발",40,"다음 중 스택을 이용한 연산과 거리가 먼 것은?","","① 선택정렬","② 재귀호출","③ 후위표현(Post-fix expression)의 연산","④ 깊이우선탐색","① 선택정렬","선택정렬은 배열의 요소를 크기 순으로 정렬하는 알고리즘으로, 스택을 이용하지 않고 배열의 요소를 직접 비교하여 정렬합니다."
"previous","220305",3,"데이터베이스구축",41,"병렬 데이터베이스 환경 중 수평 분할에서 활용되는 분할 기법이 아닌 것은?","","① 라운드-로빈","② 범위 분할","③ 예측 분할","④ 해시 분할","③ 예측 분할","예측 분할은 데이터의 미래 사용 패턴을 예측하여 데이터를 분할하는 방식으로, 데이터베이스 환경 중 수평 분할에서 활용되는 분할 기법은 아닙니다."
"previous","220305",3,"데이터베이스구축",42,"시스템 카탈로그에 대한 설명으로 옳지 않은 것은?","","① 사용자가 직접 시스템 카탈로그의 내용을 갱신하여 데이터베이스 무결성을 유지한다.","② 시스템 자신이 필요로 하는 스키마 및 여러가지 객체에 관한 정보를 포함하고 있는 시스템 데이터베이스이다.","③ 시스템 카탈로그에 저장되는 내용을 메타데이터라고도 한다.","④ 시스템 카탈로그는 DBMS가 스스로 생성하고 유지한다.","① 사용자가 직접 시스템 카탈로그의 내용을 갱신하여 데이터베이스 무결성을 유지한다.","시스템 카탈로그는 DBMS가 스스로 생성하고 유지합니다."
"previous","220305",3,"데이터베이스구축",43,"SQL 문에서 SELECT에 대한 설명으로 옳지않은 것은?","","① FROM 절에는 질의에 의해 검색될 데이터들을 포함하는 테이블명을 기술한다.","② 검색결과에 중복되는 레코드를 없애기위해서는 WHERE 절에 'DISTINCT'키워드를 사용한다.","③ HAVING 절은 GROUP BY 절과 함께 사용되며, 그룹에 대한 조건을 지정한다.","④ ORDER BY 절은 특정 속성을 기준으로 정렬하여 검색할 때 사용한다.","② 검색결과에 중복되는 레코드를 없애기위해서는 WHERE 절에 'DISTINCT'키워드를 사용한다.","SELECT 문에서 중복되는 레코드를 없애기 위해서는 DISTINCT 키워드를 SELECT 절에 사용합니다."
"previous","220305",3,"데이터베이스구축",44,"SQL에서 VIEW를 삭제할 때 사용하는 명령은?","","① ERASE","② KILL","③ DROP","④ DELETE","③ DROP","ERASE는 테이블의 데이터를 삭제하는 명령, KILL은 프로세스를 종료하는 명령, DELETE는 테이블의 행을 삭제하는 명령입니다."
"previous","220305",3,"데이터베이스구축",45,"DDL(Data Define Language)의 명령어 중스키마, 도메인, 인덱스 등을 정의할 때 사용하는 SQL문은?","","① ALTER","② SELECT","③ CREATE","④ INSERT","③ CREATE","DDL(Data Define Language)은 데이터베이스의 구조를 정의하는 데 사용되는 SQL 언어의 한 종류로, DDL 명령어는 크게 CREATE, ALTER, DROP으로 나눌 수 있습니다."
"previous","220305",3,"데이터베이스구축",46,"테이블 R1, R2에 대하여 다음 SQL문의결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_46.gif?alt=media","① https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_46_01.gif?alt=media","② https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_46_02.gif?alt=media","③ https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_46_03.gif?alt=media","④ https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_46_04.gif?alt=media","② https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_46_02.gif?alt=media","INTERSECT는 교집합을 의미합니다."
"previous","220305",3,"데이터베이스구축",47,"데이터베이스 설계 시 물리적 설계 단계에서 수행하는 사항이 아닌 것은?","","① 레코드 집중의 분석 및 설계","② 접근 경로 설계","③ 저장 레코드의 양식 설계","④ 목표 DBMS에 맞는 스키마 설계","④ 목표 DBMS에 맞는 스키마 설계","목표 DBMS에 맞는 스키마 설계는 논리적 설계 단계에서 수행하는 작업입니다."
"previous","220305",3,"데이터베이스구축",48,"릴레이션에서 기본 키를 구성하는 속성은 널(Null)값이나 중복 값을 가질 수 없다는　것을 의미하는 제약조건은?","","① 참조 무결성","② 보안 무결성","③ 개체 무결성","④ 정보 무결성","③ 개체 무결성","기본 키는 릴레이션의 각 투플을 고유하게 식별하는 속성 또는 속성들의 조합으로, 기본 키를 구성하는 속성은 널(Null)값이나 중복 값을 가질 수 없도록 두는 제약조건이 '개체 무결성' 입니다."
"previous","220305",3,"데이터베이스구축",49,"병행제어 기법의 종류가 아닌 것은?","","① 로킹 기법","② 시분할 기법","③ 타임 스탬프 기법","④ 다중 버전 기법","② 시분할 기법","시분할 기*은 CPU를 시간 단위로 나누어 여러 트랜잭션이 번갈아 가면서 실행하는 기법으로, 병행제어 기법이 아니라 시스템 자원(CPU)을 공유하기 위한 기법입니다."
"previous","220305",3,"데이터베이스구축",50,"다음 R1과 R2의 테이블에서 아래의　실행 결과를 얻기 위한 SQL문은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_50.gif?alt=media","① SELECT 과목번호, 과목이름 FROM RI, R2 WHERE R1.학번 = R2. 학번 AND R1.학과='전자공학' AND R1.이름 = '강남길’;","② SELECT 과목번호, 과목이름 FROM RI, R2 WHERE R1.학번 = R2.학번 OR R1.학과='전자공학' OR R1.이름 = '홍길동';","③ SELECT 과목번호, 과목이름 FROM R1, R2 WHERE R1.학번 R2.학번 AND R1.학과=‘컴퓨터공학' AND R1.이름 '강남길’;","④ SELECT 과목번호, 과목이름 FROM R1, R2 WHERE R1.학번 = R2.학번 OR R1.학과='컴퓨터공학' OR R1.이름 = '홍길동';","① SELECT 과목번호, 과목이름 FROM RI, R2 WHERE R1.학번 = R2. 학번 AND R1.학과='전자공학' AND R1.이름 = '강남길’;"," R1과 R2의 테이블에서 실행 결과를 얻어야 하고, 과목번호와 과목이름이라는 열을 얻어야 하기 때문에 두 컬럼을 SELECT 절에 명시합니다."
"previous","220305",3,"데이터베이스구축",51,"다음 관계 대수 중 순수 관계 연산자가 아닌 것은?","","① 차집합(difference)","② 프로젝트(project)","③ 조인(join)","④ 디비전 (division)","① 차집합(difference)","차집합 연산자는 입력 릴레이션의 속성을 변경하므로 순수 관계 연산자가 아닙니다."
"previous","220305",3,"데이터베이스구축",52,"관계형 데이터 모델의 릴레이션에 대한 설명으로 틀린 것은?","","① 모든 속성 값은 원자 값을 갖는다.","② 한 릴레이션에 포함된 튜플은 모두 상이하다.","③ 한 릴레이 션에 포함된 튜플 사이에는 순서가 없다.","④ 한 릴레이션을 구성하는 속성 사이에는 순서가 존재한다.","④ 한 릴레이션을 구성하는 속성 사이에는 순서가 존재한다.","릴레이션은 테이블과 같이 구성되어 있지만, 테이블과는 달리 속성의 순서가 정해져 있지 않습니다."
"previous","220305",3,"데이터베이스구축",53,"릴레이션 R의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때, 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이 션의 차수와 카디널리티는 얼마인가?","","① 24, 35","② 24, 12","③ 10, 35","④ 10, 12","③ 10, 35","릴레이션 R의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때, 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수는 4 * 6 = 24이고, 카디널리티는 5 * 7 = 35입니다."
"previous","220305",3,"데이터베이스구축",54,"속성(attribute)에 대한 설명으로 틀린 것은?","","① 속성은 개체의 특성을 기술한다.","② 속성은 데이터베이스를 구성하는 가장 작은 논리적 단위이다.","③ 속성은 파일 구조상 데이터 항목 또는 데이터 필드에 해당된다.","④ 속성의 수를 "cardinality" 라고 한다.","④ 속성의 수를 "cardinality" 라고 한다.","속성의 수는 차수(degree)라고 라고 하며, cardinality는 릴레이션의 튜플의 개수를 의미합니다."
"previous","220305",3,"데이터베이스구축",55,"다음 SQL 문에서 ( ) 안에 들어갈 내용으로 옳은 것은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_55.gif?alt=media","① SET","② FROM","③ INTO","④ IN","① SET","UPDATE문의 기본 형식은 UPDATE (테이블) SET (열 = 변경할 값) WHERE (조건)입니다.;"
"previous","220305",3,"데이터베이스구축",56,"관계 데이터베이스 모델에서 차수(Degree)의 의미는?","","① 튜플의 수","② 테이블의 수","③ 데이터베이스의 수","④ 애트리뷰트의 수","④ 애트리뷰트의 수","관계 데이터베이스 모델에서 릴레이션은 튜플과 애트리뷰트로 구성되며, 릴레이션의 차수는 릴레이션에 포함된 애트리뷰트의 수를 의미합니다."
"previous","220305",3,"데이터베이스구축",57,"개체-관계 모델(E-R)의 그래픽 표현으로 옳지 않은 것은?","","① 개체타입 – 사각형","② 속성 - 원형","③ 관계타입 - 마름모","④ 연결 - 삼각형","④ 연결 - 삼각형","개체-관계 모델(E-R)의 그래픽 표현에서 연결은 두 개체 간의 관계를 나타내며, 다이아몬드 모양으로 표시합니다."
"previous","220305",3,"데이터베이스구축",58,"트랜잭션의 실행이 실패하였음을 알리는 연산자로 트랜잭션이 수행한 결과를 원래의 상태로 원상 복귀 시키는 연산은?","","① COMMIT 연산","② BACKUP 연산","③ LOG 연산","④ ROLLBACK 연산","④ ROLLBACK 연산","ROLLBACK 연산은 트랜잭션의 실행이 실패하였음을 알리는 연산자로, 트랜잭션이 수행한 결과를 원래의 상태로 원상 복귀시키는 연산입니다."
"previous","220305",3,"데이터베이스구축",59,"데이터 속성 간의 종속성에 대한 엄밀한 고려없이 잘못 설계된 데이터베이스에서는 데이터 처리 연산 수행 시 각종 이상 현상이 발생할 수 있는데, 이러한 이상 현상이 아닌 것은?","","① 검색 이상","② 삽입 이상","③ 삭제 이상","④ 갱신이상","① 검색 이상","검색 이상은 데이터베이스에 저장된 데이터를 검색할 때 발생하는 이상 현상으로, 데이터 속성 간의 종속성을 고려하지 않아 발생하는 것은 아닙니다."
"previous","220305",3,"데이터베이스구축",60,"제3정규형 (3NF)에서 BCNF(Boyce-Codd Normal Form)가 되기 위한 조건은?","","① 결정자가 후보키가 아닌 함수 종속 제거","② 이행적 함수 종속 제거","③ 부분적 함수 종속 제거","④ 원자값이 아닌 도메인 분해","① 결정자가 후보키가 아닌 함수 종속 제거","제3정규형(3NF)은 기본키에 비이행적 함수 종속이 성립하지 않는 정규형입니다. 이행적 함수 종속은 결정자가 기본키가 아닌 경우에도 성립할 수 있는 함수 종속입니다."
"previous","220305",4,"프로그래밍언어활용",61,"다음 설명에 해당하는 방식은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_61.gif?alt=media","① STA","② Collision Domain","③ CSMA/CA","④ CSMA/CD","③ CSMA/CA","CSMA/CA는 Carrier Sense Multiple Access with Collision Avoidance의 약자로, 무선 네트워크에서 충돌을 방지하기 위한 방식입니다."
"previous","220305",4,"프로그래밍언어활용",62,"다음 중 가장 약한 결합도(Coupling)는?","","① Common Coupling","② Content Coupling","③ External Coupling","④ Stamp Coupling","④ Stamp Coupling","Stamp Coupling은 모듈이 다른 모듈의 출력 데이터를 단순히 전달하는 경우에 발생하는 결합도로, 모듈 간에 직접적인 의존성이 없기 때문에 가장 약한 결합도입니다."
"previous","220305",4,"프로그래밍언어활용",63,"다음 C언어 프로그램이 실행되었을 때의 결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_63.gif?alt=media","① 3","② 4","③ 7","④ 10","③ 7","a = 4 = 00000100, b = 7 = 00000111, or 연산자는 둘 중 하나만 1이어도 1로 나타내므로, 00000111 = 7 입니다."
"previous","220305",4,"프로그래밍언어활용",64,"다음 파이썬(Python) 프로그램이 실행되었을 때의 결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_64.gif?alt=media","① 0","② 2","③ 4","④ 6","④ 6","fir에 4라는 인자값, sec에 2라는 인자값이 생기고, a.setdata(4, 2)가 되어 pring(a.add())는 6입니다."
"previous","220305",4,"프로그래밍언어활용",65,"교착상태의 해결 방법 중 은행원 알고리즘(Banker's Algorithm)이 해당되는 기법은?","","① Detection","② Avoidance","③ Recovery","④ Prevention","② Avoidance","은행원 알고리즘은 교착상태 회피(Avoidance) 방법 중 하나입니다."
"previous","220305",4,"프로그래밍언어활용",66,"CIDR(Classless Inter-Domain Routing) 표기로 203.241.132.82/27과 같이 사용되었다면, 해당 주소의 서브넷 마스크(subnet mask)는?","","① 255.255.255.0","② 255.255.255.224","③ 255.255.255.240","④ 255.255.255.248","② 255.255.255.224","CIDR 표기법에서 /27은 서브넷 마스크의 1이 연속되는 비트 수를 의미합니다. 203.241.132.82/27의 서브넷 마스크는 11111111.11111111.11111111.11100000와 같으며, 이를 십진수로 표기하면 255.255.255.224가 됩니다."
"previous","220305",4,"프로그래밍언어활용",67,"다음 JAVA 프로그램이 실행되었을 때의 결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_67.gif?alt=media","① 5, 5, 5","② 5, 6, 5","③ 6, 5, 5","④ 5, 6, 4","① 5, 5, 5","Y에 먼저 5 대입 후 X 값은 1이 증가하여 X=6 , Y=5가 되며, X값 먼저 1이 감소된 후 Z에 대입하여 X=5, Z=5가 됩니다."
"previous","220305",4,"프로그래밍언어활용",68,"프로세스 적재 정책과 관련한 설명으로 틀린 것은?","","① 반복, 스택, 부프로그램은 시간 지역성(Temporal Locality)과 관련이 있다.","② 공간 지역성(Spatial Locality)은 프로세스가 어떤 페이지를 참조했다면 이후 가상주소공간상 그 페이지와 인접한 페이지들을 참조할 가능성이 높음을 의미한다.","③ 일반적으로 페이지 교환에 보내는 시간보다 프로세스 수행에 보내는 시간이 더 크면 스레싱(Thrashing)이 발생한다.","④ 스레싱(Thrashing) 현상을 방지하기 위해서는 각 프로세스가 필요로 하는 프레임을 제공할 수 있어야 한다.","③ 일반적으로 페이지 교환에 보내는 시간보다 프로세스 수행에 보내는 시간이 더 크면 스레싱(Thrashing)이 발생한다.","스레싱(Thrashing)은 프로세스가 페이지 교환을 너무 자주 수행하여 CPU가 페이지 교환에만 소비되는 현상을 의미합니다."
"previous","220305",4,"프로그래밍언어활용",69,"프레임워크(Framework)에 대한 설명으로 옳은 것은?","","① 소프트웨어 구성에 필요한 기본 구조를 제공함으로써 재사용이 가능하게 해준다.","② 소프트웨어 개발 시 구조가 잡혀 있기 때문에 확장이 불가능하다.","③ 소프트웨어 아키텍처(Architecture)와 동일한 개념이다.","④ 모듈화(Modularity)가 불가능하다.","① 소프트웨어 구성에 필요한 기본 구조를 제공함으로써 재사용이 가능하게 해준다.","프레임워크는 소프트웨어 개발을 보다 쉽고 빠르게 할 수 있도록 도와주고, 재사용성을 높여줍니다."
"previous","220305",4,"프로그래밍언어활용",70,"다음 JAVA 프로그램이 실행되었을 때의 결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_70.gif?alt=media","① 2","② 3","③ 4","④ 5","① 2","do while문에서 cnt++ 후위 증가연산이 실행되므로 cnt=1, while 문의 조건이 0보다 작을경우이므로 루프를 빠져나오고 if문에서 cnt=1 == 1 (참), cnt++ 후위 증가연산이 실행되어 정수형으로 출력한 2 입니다."
"previous","220305",4,"프로그래밍언어활용",71,"리눅스 Bash 쉘(Shell)에서 export와 관련한 설명으로 틀린 것은?","","① 변수를 출력하고자 할 때는 export를 사용해야 한다.","② export가 매개변수 없이 쓰일 경우 현재 설정된 환경변수들이 출력된다.","③ 사용자가 생성하는 변수는 export 명령어 표시하지 않는 한 현재 쉘에 국한된다.","④ 변수를 export 시키면 전역(Global)변수처럼 되어 끝까지 기억된다.","① 변수를 출력하고자 할 때는 export를 사용해야 한다.","export 명령어는 변수를 환경변수로 설정하는 명령어이고, 변수를 출력하고자 할 때는 echo 명령어를 사용합니다."
"previous","220305",4,"프로그래밍언어활용",72,"다음 C언어 프로그램이 실행되었을 때의 결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_72.gif?alt=media","① 1","② 11","③ 66","④ 98","③ 66","ASCII code table을 참조하면 A는 10진수로 나타냈을 때 65, a는 10진수로 나타냈을 때 97부터 알파벳이 시작합니다."
"previous","220305",4,"프로그래밍언어활용",73,"다음 C언어 프로그램이 실행되었을 때의 결과는?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_73.gif?alt=media","① 55","② 77","③ 121","④ 132","③ 121","반복문에서 i는 1 부터 3까지 반복하며, 내부 명령어는 sum = sum + *(p+i) 즉, sum = sum + *(a[0] + i)입니다."
"previous","220305",4,"프로그래밍언어활용",74,"페이징 기법에서 페이지 크기가 작아질수록 발생하는 현상이 아닌 것은?","","① 기억장소 이용 효율이 증가한다.","② 입·출력 시간이 늘어난다.","③ 내부 단편화가 감소한다.","④ 페이지 맵 테이블의 크기가 감소한다.","④ 페이지 맵 테이블의 크기가 감소한다.","페이지 맵 테이블의 크기는 페이지 크기에 영향을 받지 않습니다."
"previous","220305",4,"프로그래밍언어활용",75,"다음 중 가장 강한 응집도(Cohesion)는?","","① Sequential Cohesion","② Procedural Cohesion","③ Logical Cohesion","④ Coincidental Cohesion","① Sequential Cohesion","Sequential Cohesion은 모듈 내부의 구성 요소들이 순차적으로 연관되어 있는 경우로, 응집도가 가장 낮은 수준입니다."
"previous","220305",4,"프로그래밍언어활용",76,"TCP 프로토콜과 관련한 설명으로 틀린 것은?","","① 인접한 노드 사이의 프레임 전송 및 오류를 제어한다.","② 흐름 제어(Flow Control)의 기능을 수행한다.","③ 전이 중(Full Duplex) 방식의 양방향 가상회선을 제공한다.","④ 전송 데이터와 응답 데이터를 함께 전송할 수 있다.","① 인접한 노드 사이의 프레임 전송 및 오류를 제어한다.","TCP 프로토콜은 인접한 노드 사이뿐만 아니라 인터넷 상에서 데이터 전송을 제어합니다."
"previous","220305",4,"프로그래밍언어활용",77,"C언어에서 연산자 우선순위가 높은 것에서 낮은 것으로 바르게 나열된 것은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_77.gif?alt=media","① ㉠, ㉥, ㉣, ㉢, ㉡, ㉤","② ㉠, ㉣, ㉥, ㉢, ㉡, ㉤","③ ㉠, ㉣, ㉥, ㉢, ㉤, ㉡","④ ㉠, ㉥, ㉣, ㉤, ㉡, ㉢","① ㉠, ㉥, ㉣, ㉢, ㉡, ㉤","C언어에서 연산자의 우선순위는 단항연산자, 이항연산자, 관계연산자, 비트연산자, 논리연산자, 삼항연산자, 대입/할당연산자의 순서입니다."
"previous","220305",4,"프로그래밍언어활용",78,"C언어 라이브러리 중 stdlib.h에 대한설명으로 옳은 것은?","","① 문자열을 수치 데이터로 바꾸는 문자 변환함수와 수치를 문자열로 바꿔주는 변환함수 등이 있다.","② 문자열 처리 함수로 strlen()이 포함되어 있다.","③ 표준 입출력 라이브러리이다.","④ 삼각 함수, 제곱근, 지수 등 수학적인 함수를 내장하고 있다.","① 문자열을 수치 데이터로 바꾸는 문자 변환함수와 수치를 문자열로 바꿔주는 변환함수 등이 있다.","stdlib.h는 C 언어의 표준 라이브러리 중 하나로, 일반적인 작업에 사용되는 함수들을 포함하고 있습니다."
"previous","220305",4,"프로그래밍언어활용",79,"자바스크립트(JavaScript)와 관련한 설명으로 틀린 것은?","","① 프로토타입(Prototype)의 개념이 존재한다.","② 클래스 기반으로 객체 상속을 지원한다.","③ Prototype Link와 Prototype Object를 활용할 수 있다.","④ 객체지향 언어이다.","② 클래스 기반으로 객체 상속을 지원한다.","자바스크립트는 프로토타입 기반의 객체 지향 언어이기 때문에 클래스 기반의 객체 상속을 지원하지 않습니다. (가답안은 2번으로 발표되었지만, 확정답안은 1/2/3/4번이 모두 정답처리 된 문항입니다.)"
"previous","220305",4,"프로그래밍언어활용",80,"OSI 7계층 중 네트워크 계층에 대한 설명으로 틀린 것은?","","① 패킷을 발신지로부터 최종 목적지까지 전달하는 책임을 진다.","② 한 노드로부터 다른 노드로 프레임을 전송하는 책임을 진다.","③ 패킷에 발신지와 목적지의 논리 주소를 추가한다.","④ 라우터 또는 교환기는 패킷 전달을 위해 경로를 지정하거나 교환 기능을 제공한다.","② 한 노드로부터 다른 노드로 프레임을 전송하는 책임을 진다.","네트워크 계층은 데이터 링크 계층에서 전달받은 프레임을 패킷으로 변환하여 발신지로부터 최종 목적지까지 전달하는 책임을 집니다."
"previous","220305",5,"정보시스템구축관리",81,"다음 내용이 설명하는 것은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_81.gif?alt=media","① SAN","② MBR","③ NAC","④ NIC","① SAN","SAN (Storage Area Network)은 여러 대의 서버, 호스트 및 스토리지 장치가 네트워크를 통해 서로 통신하는 것을 말합니다."
"previous","220305",5,"정보시스템구축관리",82,"SSH(Secure Shell)에 대한 설명으로 틀린 것은?","","① SSH의 기본 네트워크 포트는 220번을 사용한다.","② 전송되는 데이터는 암호화된다.","③ 키를 통한 인증은 클라이언트의 공개키를 서버에 등록해야 한다.","④ 서로 연결되어 있는 컴퓨터 간 원격 명령실행이나 셀 서비스 등을 수행한다.","SSH의 기본 네트워크 포트는 220번을 사용한다.","SSH의 기본 네트워크 포트는 22번입니다."
"previous","220305",5,"정보시스템구축관리",83,"CBD(Component Based Development) SW개발 표준 산출물 중 분석 단계에 해당하는 것은?","","① 클래스 설계서","② 통합시험 결과서","③ 프로그램 코드","④ 사용자 요구사항 정의서","④ 사용자 요구사항 정의서","사용자 요구사항 정의서(URS)는 분석 단계에서 작성되며, 이후의 설계, 개발, 테스트 등 모든 개발 단계에서 참조됩니다."
"previous","220305",5,"정보시스템구축관리",84,"다음 내용이 설명하는 접근 제어 모델은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_84.gif?alt=media","① Clark-Wilson Integrity Model","② PDCA Model","③ Bell-Lapadula Model","④ Chinese Wall Model","③ Bell-Lapadula Model","Bell-Lapadula모델은 기밀성을 중요시하는 모델로, 정보의 노출을 방지하기 위해 객체와 주체에 대한 접근 권한을 제한하는 모델입니다."
"previous","220305",5,"정보시스템구축관리",85,"하둡(Hadoop)과 관계형 데이터베이스간에 데이터를 전송할 수 있도록 설계된 도구는?","","① Apnic","② Topology","③ Sqoop","④ SDB","③ Sqoop","Sqoop은 관계형 데이터베이스에서 하둡 분산 파일 시스템(HDFS)으로 데이터를 가져오거나, 하둡 HDFS에서 관계형 데이터베이스로 데이터를 내보낼 수 있습니다."
"previous","220305",5,"정보시스템구축관리",86,"라우팅 프로토콜인 OSPF(Open Shortest Path First)에 대한 설명으로 옳지 않은 것은?","","① 네트워크 변화에 신속하게 대처할 수 있다.","② 거리 벡터 라우팅 프로토콜이라고 한다.","③ 멀티캐스팅을 지원한다.","④ 최단 경로 탐색에 Dijkstra 사용한다.","② 거리 벡터 라우팅 프로토콜이라고 한다.","OSPF는 링크 상태 라우팅 프로토콜(LSRP)로 분류되며, 거리 벡터 라우팅 프로토콜과는 다른 라우팅 프로토콜입니다."
"previous","220305",5,"정보시스템구축관리",87,"소프트웨어 비용 추정 모형(estimation models)이 아닌 것은?","","① COCOMO","② Putnam","③ Function-Point","④ PERT","④ PERT","PERT(Program Evaluation and Review Technique)는 프로젝트 관리에 사용되는 모형으로, 소프트웨어 비용 추정 모형은 아닙니다."
"previous","220305",5,"정보시스템구축관리",88,"코드의 기입 과정에서 원래 '12536‘으로 기입되어야 하는데 ’12936‘으로 표기되었을 경우, 어떤 코드 오류에 해당하는가?","","① Addition Error","② Omission Error","③ Sequence Error","④ Transcription Error","④ Transcription Error","Transcription Error는 코드의 입력 과정에서 발생하는 오류를 의미합니다."
"previous","220305",5,"정보시스템구축관리",89,"ISO 12207 표준의 기본 생명주기의 주요 프로세스에 해당하지 않는 것은?","","① 획득 프로세스","② 개발 프로세스","③ 성능평가 프로세스","④ 유지보수 프로세스","③ 성능평가 프로세스","성능평가 프로세스는 기본 생명주기의 주요 프로세스가 아니라, 지원 생명주기의 주요 프로세스에 해당합니다."
"previous","220305",5,"정보시스템구축관리",90,"소프트웨어 비용 산정 기법 중 개발 유형으로 organic, semi-detached, embedded로 구분되는 것은?","","① PUTNAM","② COCOMO","③ FP","④ SLIM","② COCOMO","COCOMO는 소프트웨어 개발의 규모와 복잡도를 고려하여 소프트웨어 개발에 필요한 노력과 비용을 추정하는 모형으로, 개발 유형을 organic, semi-detached, embedded로 구분하여 각각 다른 모형을 적용합니다."
"previous","220305",5,"정보시스템구축관리",91,"SPICE 모델의 프로세스 수행능력 수준의 단계별 설명이 틀린 것은?","","① 수준 7 - 미완성 단계","② 수준 5 - 최적화 단계","③ 수준 4 - 예측 단계","④ 수준 3 - 확립 단계","① 수준 7 - 미완성 단계","수준 7은 프로세스가 완전히 확립되었으며, 일상적인 업무에 적용되는 수준입니다."
"previous","220305",5,"정보시스템구축관리",92,"PC, TV, 휴대폰에서 원하는 콘텐츠를 끊김없이 자유롭게 이용할 수 있는 서비스는?","","① Memristor","② MEMS","③ SNMP","④ N-Screen","④ N-Screen","N-Screen은 네트워크를 활용하여 다양한 기기에서 하나의 콘텐츠를 끊김없이 이용할 수 있게 해주는 서비스를 말합니다."
"previous","220305",5,"정보시스템구축관리",93,"해쉬(Hash) 기법에 대한 설명으로 틀린 것은?","","① 임의의 길이의 입력 데이터를 받아 고정된 길이의 해쉬 값으로 변환한다.","② 주로 공개키 암호화 방식에서 키 생성을 위해 사용한다.","③ 대표적인 해쉬 알고리즘으로 HAVAL, SHA-1 등이 있다.","④ 해쉬 함수는 일방향 함수(One-way function)이다.","② 주로 공개키 암호화 방식에서 키 생성을 위해 사용한다.","공개키 암호화 방식은 키 생성을 위해 해시 기법을 사용하기도 하지만, 해시 기법을 사용하는 주된 용도는 아닙니다."
"previous","220305",5,"정보시스템구축관리",94,"IPSec(IP Security)에 대한 설명으로 틀린 것은?","","① 암호화 수행시 일방향 암호화만 지원한다.","② ESP는 발신지 인증, 데이터 무결성, 기밀성 모두를 보장한다.","③ 운영 모드는 Tunnel 모드와 Transport 모드로 분류된다.","④ AH는 발신지 호스트를 인증하고, IP 패킷의 무결성을 보장한다.","① 암호화 수행시 일방향 암호화만 지원한다.","IPSec은 암호화 수행시 양방향 암호화도 지원합니다."
"previous","220305",5,"정보시스템구축관리",95,"메모리상에서 프로그램의 복귀 주소와 변수 사이에 특정 값을 저장해 두었다가 그 값이 변경되었을 경우 오버플로우 상태로 가정하여 프로그램 실행을 중단하는 기술은?","","① Stack Guard","② Bridge","③ ASLR","④ FIN","① Stack Guard","Stack Guard는 스택 오버플로우 공격을 방지하기 위해 사용되는 기술로, 메모리상에서 프로그램의 복귀 주소와 변수 사이에 특정 값을 저장해 두었다가 그 값이 변경되었을 경우 오버플로우 상태로 가정하여 프로그램 실행을 중단하는 기술입니다."
"previous","220305",5,"정보시스템구축관리",96,"침입차단 시스템(방화벽) 중 다음과 같은 형태의 구축 유형은?","https://firebasestorage.googleapis.com/v0/b/kh-basic-frontend-react-f5a7b.firebasestorage.app/o/DEVOLT%2FEXAM%2FPREVIOUS%2F210515%2FDEVOLT_EXAM_MOCK_210515_96.gif?alt=media","① Block Host","② Tree Host","③ Screened Subnet","④ Ring Homed","③ Screened Subnet","외부 네트워크와 내부 네트워크 사이에 DMZ(Demilitarized Zone)라는 중간 지대를 두고, DMZ에는 외부에서 접근 가능한 서버들을 배치하고, DMZ와 내부 네트워크 사이에는 방화벽을 설치하여 외부에서 내부 네트워크로의 직접적인 접근을 차단하는 구조의 Screened Subnet 유형입니다."
"previous","220305",5,"정보시스템구축관리",97,"Secure OS의 보안 기능으로 거리가 먼 것은?","","① 식별 및 인증","② 임의적 접근 통제","③ 고가용성 지원","④ 강제적 접근 통제","③ 고가용성 지원","Secure OS는 시스템의 보안을 강화하는 것을 목적으로 하기 때문에, 고가용성 지원은 Secure OS의 주요 기능은 아닙니다."
"previous","220305",5,"정보시스템구축관리",98,"서버에 열린 포트 정보를 스캐닝해서 보안취약점을 찾는데 사용하는 도구는?","","① type","② mkdir","③ ftp","④ nmap","④ nmap","type, mkdir, ftp는 모두 파일이나 디렉터리, 네트워크 연결을 생성하는 명령어이며, 서버에 열린 포트 정보를 스캐닝해서 보안취약점을 찾는데 사용하는 도구는 nmap입니다."
"previous","220305",5,"정보시스템구축관리",99,"서로 다른 네트워크 대역에 있는 호스트들 상호간에 통신할 수 있도록 해주는 네트워크 장비는?","","① L2 스위치","② HIPO","③ 라우터","④ RAD","③ 라우터","라우터는 경로 설정, 네트워크 주소 변환, 보안과 같은 기능을 통해 서로 다른 네트워크 대역에 있는 호스트들 간의 통신을 가능하게 합니다."
"previous","220305",5,"정보시스템구축관리",100,"암호화 키와 복호화 키가 동일한 암호화 알고리즘은?","","① RSA","② AES","③ DSA","④ ECC","② AES","AES는 대칭키 암호화 알고리즘으로, 암호화 키와 복호화 키가 동일합니다."